# generated by datamodel-codegen:
#   filename:  world_builder_declarations.schema.json
#   timestamp: 2023-11-10T16:52:26+00:00

from __future__ import annotations

from enum import Enum
from typing import Any, List, Optional, Union

from pydantic import BaseModel, Extra, Field


class CrossSectionItem(BaseModel):
    __root__: List[Any]


class Model1(Enum):
    cartesian = 'cartesian'


class CoordinateSystemItem(BaseModel):
    class Config:
        extra = Extra.forbid

    model: Model1


class Model2(Enum):
    spherical = 'spherical'


class DepthMethod(Enum):
    starting_point = 'starting point'
    begin_segment = 'begin segment'
    begin_at_end_segment = 'begin at end segment'
    continuous = 'continuous'


class CoordinateSystemItem1(BaseModel):
    class Config:
        extra = Extra.forbid

    model: Model2
    depth_method: DepthMethod = Field(..., alias='depth method')
    radius: Optional[float] = None


class Model3(Enum):
    uniform = 'uniform'


class GravityModelItem(BaseModel):
    class Config:
        extra = Extra.forbid

    model: Model3
    magnitude: Optional[float] = None


class Model4(Enum):
    continental_plate = 'continental plate'


class Coordinate(BaseModel):
    __root__: List[Any]


class MinDepthItem(BaseModel):
    class Config:
        extra = Extra.forbid

    __root__: List[Any]


class MaxDepthItem(BaseModel):
    class Config:
        extra = Extra.forbid

    __root__: List[Any]


class Model5(Enum):
    adiabatic = 'adiabatic'


class Operation(Enum):
    replace = 'replace'
    add = 'add'
    subtract = 'subtract'


class TemperatureModel(BaseModel):
    class Config:
        extra = Extra.forbid

    model: Model5
    operation: Optional[Operation] = None
    min_depth: Optional[Union[float, List[MinDepthItem]]] = Field(
        None, alias='min depth'
    )
    max_depth: Optional[Union[float, List[MaxDepthItem]]] = Field(
        None, alias='max depth'
    )
    potential_mantle_temperature: Optional[float] = Field(
        None, alias='potential mantle temperature'
    )
    thermal_expansion_coefficient: Optional[float] = Field(
        None, alias='thermal expansion coefficient'
    )
    specific_heat: Optional[float] = Field(None, alias='specific heat')


class Model6(Enum):
    linear = 'linear'


class TemperatureModel1(BaseModel):
    class Config:
        extra = Extra.forbid

    model: Model6
    operation: Optional[Operation] = None
    min_depth: Optional[Union[float, List[MinDepthItem]]] = Field(
        None, alias='min depth'
    )
    max_depth: Union[float, List[MaxDepthItem]] = Field(..., alias='max depth')
    top_temperature: Optional[float] = Field(None, alias='top temperature')
    bottom_temperature: Optional[float] = Field(None, alias='bottom temperature')


class Model7(Enum):
    uniform = 'uniform'


class TemperatureModel2(BaseModel):
    class Config:
        extra = Extra.forbid

    model: Model7
    operation: Optional[Operation] = None
    min_depth: Optional[Union[float, List[MinDepthItem]]] = Field(
        None, alias='min depth'
    )
    max_depth: Optional[Union[float, List[MaxDepthItem]]] = Field(
        None, alias='max depth'
    )
    temperature: float


class Operation3(Enum):
    replace = 'replace'
    replace_defined_only = 'replace defined only'
    add = 'add'
    subtract = 'subtract'


class CompositionModel(BaseModel):
    class Config:
        extra = Extra.forbid

    model: Model7
    min_depth: Optional[Union[float, List[MinDepthItem]]] = Field(
        None, alias='min depth'
    )
    max_depth: Optional[Union[float, List[MaxDepthItem]]] = Field(
        None, alias='max depth'
    )
    compositions: List[int] = Field(
        ..., max_items=4294967295, min_items=0, unique_items=False
    )
    fractions: Optional[List[float]] = Field(
        None, max_items=4294967295, min_items=1, unique_items=False
    )
    operation: Optional[Operation3] = None


class Model9(Enum):
    random_uniform_distribution = 'random uniform distribution'


class OrientationOperation(Enum):
    replace = 'replace'


class GrainsModel(BaseModel):
    class Config:
        extra = Extra.forbid

    model: Model9
    min_depth: Optional[Union[float, List[MinDepthItem]]] = Field(
        None, alias='min depth'
    )
    max_depth: Optional[Union[float, List[MaxDepthItem]]] = Field(
        None, alias='max depth'
    )
    compositions: List[int] = Field(
        ..., max_items=4294967295, min_items=0, unique_items=False
    )
    orientation_operation: Optional[OrientationOperation] = Field(
        None, alias='orientation operation'
    )
    grain_sizes: Optional[List[float]] = Field(
        None, alias='grain sizes', max_items=4294967295, min_items=0, unique_items=False
    )
    normalize_grain_sizes: Optional[List[bool]] = Field(
        None,
        alias='normalize grain sizes',
        max_items=4294967295,
        min_items=0,
        unique_items=False,
    )


class Model10(Enum):
    uniform = 'uniform'


class RotationMatrice(BaseModel):
    __root__: List[Any]


class EulerAnglesZXZItem(BaseModel):
    __root__: List[Any]


class OrientationOperation1(Enum):
    replace = 'replace'
    multiply = 'multiply'


class GrainsModel1(BaseModel):
    class Config:
        extra = Extra.forbid

    model: Model10
    min_depth: Optional[Union[float, List[MinDepthItem]]] = Field(
        None, alias='min depth'
    )
    max_depth: Optional[Union[float, List[MaxDepthItem]]] = Field(
        None, alias='max depth'
    )
    compositions: List[int] = Field(
        ..., max_items=4294967295, min_items=0, unique_items=False
    )
    rotation_matrices: Optional[List[RotationMatrice]] = Field(
        None,
        alias='rotation matrices',
        max_items=4294967295,
        min_items=0,
        unique_items=False,
    )
    Euler_angles_z_x_z: Optional[List[EulerAnglesZXZItem]] = Field(
        None,
        alias='Euler angles z-x-z',
        max_items=4294967295,
        min_items=0,
        unique_items=False,
    )
    orientation_operation: Optional[OrientationOperation1] = Field(
        None, alias='orientation operation'
    )
    grain_sizes: Optional[List[float]] = Field(
        None, alias='grain sizes', max_items=4294967295, min_items=0, unique_items=False
    )


class Feature(BaseModel):
    class Config:
        extra = Extra.forbid

    model: Model4
    name: Optional[str] = None
    coordinates: Optional[List[Coordinate]] = Field(
        None, max_items=4294967295, min_items=1, unique_items=False
    )
    interpolation: Optional[str] = None
    min_depth: Optional[Union[float, List[MinDepthItem]]] = Field(
        None, alias='min depth'
    )
    max_depth: Optional[Union[float, List[MaxDepthItem]]] = Field(
        None, alias='max depth'
    )
    temperature_models: Optional[
        List[Union[TemperatureModel, TemperatureModel1, TemperatureModel2]]
    ] = Field(None, alias='temperature models')
    composition_models: Optional[List[CompositionModel]] = Field(
        None, alias='composition models'
    )
    grains_models: Optional[List[Union[GrainsModel, GrainsModel1]]] = Field(
        None, alias='grains models'
    )


class Model11(Enum):
    fault = 'fault'


class Model12(Enum):
    adiabatic = 'adiabatic'


class Operation4(Enum):
    replace = 'replace'
    add = 'add'
    subtract = 'subtract'


class TemperatureModel3(BaseModel):
    class Config:
        extra = Extra.forbid

    model: Model12
    operation: Optional[Operation4] = None
    min_distance_fault_center: Optional[float] = Field(
        None, alias='min distance fault center'
    )
    max_distance_fault_center: Optional[float] = Field(
        None, alias='max distance fault center'
    )
    potential_mantle_temperature: Optional[float] = Field(
        None, alias='potential mantle temperature'
    )
    thermal_expansion_coefficient: Optional[float] = Field(
        None, alias='thermal expansion coefficient'
    )
    specific_heat: Optional[float] = Field(None, alias='specific heat')


class Model13(Enum):
    linear = 'linear'


class TemperatureModel4(BaseModel):
    class Config:
        extra = Extra.forbid

    model: Model13
    operation: Optional[Operation4] = None
    min_distance_fault_center: Optional[float] = Field(
        None, alias='min distance fault center'
    )
    max_distance_fault_center: float = Field(..., alias='max distance fault center')
    center_temperature: Optional[float] = Field(None, alias='center temperature')
    side_temperature: Optional[float] = Field(None, alias='side temperature')


class Model14(Enum):
    uniform = 'uniform'


class TemperatureModel5(BaseModel):
    class Config:
        extra = Extra.forbid

    model: Model14
    operation: Optional[Operation4] = None
    min_distance_fault_center: Optional[float] = Field(
        None, alias='min distance fault center'
    )
    max_distance_fault_center: Optional[float] = Field(
        None, alias='max distance fault center'
    )
    temperature: float


class Model15(Enum):
    smooth = 'smooth'


class Operation7(Enum):
    replace = 'replace'
    replace_defined_only = 'replace defined only'
    add = 'add'
    subtract = 'subtract'


class CompositionModel1(BaseModel):
    class Config:
        extra = Extra.forbid

    model: Model15
    min_distance_fault_center: Optional[float] = Field(
        None, alias='min distance fault center'
    )
    side_distance_fault_center: Optional[float] = Field(
        None, alias='side distance fault center'
    )
    center_fractions: Optional[List[float]] = Field(
        None,
        alias='center fractions',
        max_items=4294967295,
        min_items=1,
        unique_items=False,
    )
    side_fractions: Optional[List[float]] = Field(
        None,
        alias='side fractions',
        max_items=4294967295,
        min_items=1,
        unique_items=False,
    )
    compositions: List[int] = Field(
        ..., max_items=4294967295, min_items=0, unique_items=False
    )
    operation: Optional[Operation7] = None


class Model16(Enum):
    uniform = 'uniform'


class CompositionModel2(BaseModel):
    class Config:
        extra = Extra.forbid

    model: Model16
    min_distance_fault_center: Optional[float] = Field(
        None, alias='min distance fault center'
    )
    max_distance_fault_center: Optional[float] = Field(
        None, alias='max distance fault center'
    )
    compositions: List[int] = Field(
        ..., max_items=4294967295, min_items=0, unique_items=False
    )
    fractions: Optional[List[float]] = Field(
        None, max_items=4294967295, min_items=1, unique_items=False
    )
    operation: Optional[Operation7] = None


class Model17(Enum):
    random_uniform_distribution = 'random uniform distribution'


class OrientationOperation2(Enum):
    replace = 'replace'


class GrainsModel2(BaseModel):
    class Config:
        extra = Extra.forbid

    model: Model17
    min_distance_fault_center: Optional[float] = Field(
        None, alias='min distance fault center'
    )
    max_distance_fault_center: Optional[float] = Field(
        None, alias='max distance fault center'
    )
    compositions: List[int] = Field(
        ..., max_items=4294967295, min_items=0, unique_items=False
    )
    orientation_operation: Optional[OrientationOperation2] = Field(
        None, alias='orientation operation'
    )
    grain_sizes: Optional[List[float]] = Field(
        None, alias='grain sizes', max_items=4294967295, min_items=0, unique_items=False
    )
    normalize_grain_sizes: Optional[List[bool]] = Field(
        None,
        alias='normalize grain sizes',
        max_items=4294967295,
        min_items=0,
        unique_items=False,
    )


class Model18(Enum):
    uniform = 'uniform'


class GrainsModel3(BaseModel):
    class Config:
        extra = Extra.forbid

    model: Model18
    min_distance_fault_center: Optional[float] = Field(
        None, alias='min distance fault center'
    )
    max_distance_fault_center: Optional[float] = Field(
        None, alias='max distance fault center'
    )
    compositions: List[int] = Field(
        ..., max_items=4294967295, min_items=0, unique_items=False
    )
    rotation_matrices: Optional[List[RotationMatrice]] = Field(
        None,
        alias='rotation matrices',
        max_items=4294967295,
        min_items=0,
        unique_items=False,
    )
    Euler_angles_z_x_z: Optional[List[EulerAnglesZXZItem]] = Field(
        None,
        alias='Euler angles z-x-z',
        max_items=4294967295,
        min_items=0,
        unique_items=False,
    )
    orientation_operation: Optional[OrientationOperation2] = Field(
        None, alias='orientation operation'
    )
    grain_sizes: Optional[List[float]] = Field(
        None, alias='grain sizes', max_items=4294967295, min_items=0, unique_items=False
    )


class Segment(BaseModel):
    class Config:
        extra = Extra.forbid

    length: float
    thickness: List[float] = Field(..., max_items=2, min_items=1)
    top_truncation: Optional[List[float]] = Field(
        None, alias='top truncation', max_items=2, min_items=1
    )
    angle: List[float] = Field(..., max_items=2, min_items=1)
    temperature_models: Optional[
        List[Union[TemperatureModel3, TemperatureModel4, TemperatureModel5]]
    ] = Field(None, alias='temperature models')
    composition_models: Optional[
        List[Union[CompositionModel1, CompositionModel2]]
    ] = Field(None, alias='composition models')
    grains_models: Optional[List[Union[GrainsModel2, GrainsModel3]]] = Field(
        None, alias='grains models'
    )


class Model19(Enum):
    adiabatic = 'adiabatic'


class Operation9(Enum):
    replace = 'replace'
    add = 'add'
    subtract = 'subtract'


class TemperatureModel6(BaseModel):
    class Config:
        extra = Extra.forbid

    model: Model19
    operation: Optional[Operation9] = None
    min_distance_fault_center: Optional[float] = Field(
        None, alias='min distance fault center'
    )
    max_distance_fault_center: Optional[float] = Field(
        None, alias='max distance fault center'
    )
    potential_mantle_temperature: Optional[float] = Field(
        None, alias='potential mantle temperature'
    )
    thermal_expansion_coefficient: Optional[float] = Field(
        None, alias='thermal expansion coefficient'
    )
    specific_heat: Optional[float] = Field(None, alias='specific heat')


class Model20(Enum):
    linear = 'linear'


class TemperatureModel7(BaseModel):
    class Config:
        extra = Extra.forbid

    model: Model20
    operation: Optional[Operation9] = None
    min_distance_fault_center: Optional[float] = Field(
        None, alias='min distance fault center'
    )
    max_distance_fault_center: float = Field(..., alias='max distance fault center')
    center_temperature: Optional[float] = Field(None, alias='center temperature')
    side_temperature: Optional[float] = Field(None, alias='side temperature')


class Model21(Enum):
    uniform = 'uniform'


class TemperatureModel8(BaseModel):
    class Config:
        extra = Extra.forbid

    model: Model21
    operation: Optional[Operation9] = None
    min_distance_fault_center: Optional[float] = Field(
        None, alias='min distance fault center'
    )
    max_distance_fault_center: Optional[float] = Field(
        None, alias='max distance fault center'
    )
    temperature: float


class Model22(Enum):
    smooth = 'smooth'


class Operation12(Enum):
    replace = 'replace'
    replace_defined_only = 'replace defined only'
    add = 'add'
    subtract = 'subtract'


class CompositionModel3(BaseModel):
    class Config:
        extra = Extra.forbid

    model: Model22
    min_distance_fault_center: Optional[float] = Field(
        None, alias='min distance fault center'
    )
    side_distance_fault_center: Optional[float] = Field(
        None, alias='side distance fault center'
    )
    center_fractions: Optional[List[float]] = Field(
        None,
        alias='center fractions',
        max_items=4294967295,
        min_items=1,
        unique_items=False,
    )
    side_fractions: Optional[List[float]] = Field(
        None,
        alias='side fractions',
        max_items=4294967295,
        min_items=1,
        unique_items=False,
    )
    compositions: List[int] = Field(
        ..., max_items=4294967295, min_items=0, unique_items=False
    )
    operation: Optional[Operation12] = None


class Model23(Enum):
    uniform = 'uniform'


class CompositionModel4(BaseModel):
    class Config:
        extra = Extra.forbid

    model: Model23
    min_distance_fault_center: Optional[float] = Field(
        None, alias='min distance fault center'
    )
    max_distance_fault_center: Optional[float] = Field(
        None, alias='max distance fault center'
    )
    compositions: List[int] = Field(
        ..., max_items=4294967295, min_items=0, unique_items=False
    )
    fractions: Optional[List[float]] = Field(
        None, max_items=4294967295, min_items=1, unique_items=False
    )
    operation: Optional[Operation12] = None


class Model24(Enum):
    random_uniform_distribution = 'random uniform distribution'


class GrainsModel4(BaseModel):
    class Config:
        extra = Extra.forbid

    model: Model24
    min_distance_fault_center: Optional[float] = Field(
        None, alias='min distance fault center'
    )
    max_distance_fault_center: Optional[float] = Field(
        None, alias='max distance fault center'
    )
    compositions: List[int] = Field(
        ..., max_items=4294967295, min_items=0, unique_items=False
    )
    orientation_operation: Optional[OrientationOperation2] = Field(
        None, alias='orientation operation'
    )
    grain_sizes: Optional[List[float]] = Field(
        None, alias='grain sizes', max_items=4294967295, min_items=0, unique_items=False
    )
    normalize_grain_sizes: Optional[List[bool]] = Field(
        None,
        alias='normalize grain sizes',
        max_items=4294967295,
        min_items=0,
        unique_items=False,
    )


class Model25(Enum):
    uniform = 'uniform'


class GrainsModel5(BaseModel):
    class Config:
        extra = Extra.forbid

    model: Model25
    min_distance_fault_center: Optional[float] = Field(
        None, alias='min distance fault center'
    )
    max_distance_fault_center: Optional[float] = Field(
        None, alias='max distance fault center'
    )
    compositions: List[int] = Field(
        ..., max_items=4294967295, min_items=0, unique_items=False
    )
    rotation_matrices: Optional[List[RotationMatrice]] = Field(
        None,
        alias='rotation matrices',
        max_items=4294967295,
        min_items=0,
        unique_items=False,
    )
    Euler_angles_z_x_z: Optional[List[EulerAnglesZXZItem]] = Field(
        None,
        alias='Euler angles z-x-z',
        max_items=4294967295,
        min_items=0,
        unique_items=False,
    )
    orientation_operation: Optional[OrientationOperation2] = Field(
        None, alias='orientation operation'
    )
    grain_sizes: Optional[List[float]] = Field(
        None, alias='grain sizes', max_items=4294967295, min_items=0, unique_items=False
    )


class Model26(Enum):
    adiabatic = 'adiabatic'


class Operation14(Enum):
    replace = 'replace'
    add = 'add'
    subtract = 'subtract'


class TemperatureModel9(BaseModel):
    class Config:
        extra = Extra.forbid

    model: Model26
    operation: Optional[Operation14] = None
    min_distance_fault_center: Optional[float] = Field(
        None, alias='min distance fault center'
    )
    max_distance_fault_center: Optional[float] = Field(
        None, alias='max distance fault center'
    )
    potential_mantle_temperature: Optional[float] = Field(
        None, alias='potential mantle temperature'
    )
    thermal_expansion_coefficient: Optional[float] = Field(
        None, alias='thermal expansion coefficient'
    )
    specific_heat: Optional[float] = Field(None, alias='specific heat')


class Model27(Enum):
    linear = 'linear'


class TemperatureModel10(BaseModel):
    class Config:
        extra = Extra.forbid

    model: Model27
    operation: Optional[Operation14] = None
    min_distance_fault_center: Optional[float] = Field(
        None, alias='min distance fault center'
    )
    max_distance_fault_center: float = Field(..., alias='max distance fault center')
    center_temperature: Optional[float] = Field(None, alias='center temperature')
    side_temperature: Optional[float] = Field(None, alias='side temperature')


class Model28(Enum):
    uniform = 'uniform'


class TemperatureModel11(BaseModel):
    class Config:
        extra = Extra.forbid

    model: Model28
    operation: Optional[Operation14] = None
    min_distance_fault_center: Optional[float] = Field(
        None, alias='min distance fault center'
    )
    max_distance_fault_center: Optional[float] = Field(
        None, alias='max distance fault center'
    )
    temperature: float


class Model29(Enum):
    smooth = 'smooth'


class Operation17(Enum):
    replace = 'replace'
    replace_defined_only = 'replace defined only'
    add = 'add'
    subtract = 'subtract'


class CompositionModel5(BaseModel):
    class Config:
        extra = Extra.forbid

    model: Model29
    min_distance_fault_center: Optional[float] = Field(
        None, alias='min distance fault center'
    )
    side_distance_fault_center: Optional[float] = Field(
        None, alias='side distance fault center'
    )
    center_fractions: Optional[List[float]] = Field(
        None,
        alias='center fractions',
        max_items=4294967295,
        min_items=1,
        unique_items=False,
    )
    side_fractions: Optional[List[float]] = Field(
        None,
        alias='side fractions',
        max_items=4294967295,
        min_items=1,
        unique_items=False,
    )
    compositions: List[int] = Field(
        ..., max_items=4294967295, min_items=0, unique_items=False
    )
    operation: Optional[Operation17] = None


class Model30(Enum):
    uniform = 'uniform'


class CompositionModel6(BaseModel):
    class Config:
        extra = Extra.forbid

    model: Model30
    min_distance_fault_center: Optional[float] = Field(
        None, alias='min distance fault center'
    )
    max_distance_fault_center: Optional[float] = Field(
        None, alias='max distance fault center'
    )
    compositions: List[int] = Field(
        ..., max_items=4294967295, min_items=0, unique_items=False
    )
    fractions: Optional[List[float]] = Field(
        None, max_items=4294967295, min_items=1, unique_items=False
    )
    operation: Optional[Operation17] = None


class Model31(Enum):
    random_uniform_distribution = 'random uniform distribution'


class GrainsModel6(BaseModel):
    class Config:
        extra = Extra.forbid

    model: Model31
    min_distance_fault_center: Optional[float] = Field(
        None, alias='min distance fault center'
    )
    max_distance_fault_center: Optional[float] = Field(
        None, alias='max distance fault center'
    )
    compositions: List[int] = Field(
        ..., max_items=4294967295, min_items=0, unique_items=False
    )
    orientation_operation: Optional[OrientationOperation2] = Field(
        None, alias='orientation operation'
    )
    grain_sizes: Optional[List[float]] = Field(
        None, alias='grain sizes', max_items=4294967295, min_items=0, unique_items=False
    )
    normalize_grain_sizes: Optional[List[bool]] = Field(
        None,
        alias='normalize grain sizes',
        max_items=4294967295,
        min_items=0,
        unique_items=False,
    )


class Model32(Enum):
    uniform = 'uniform'


class GrainsModel7(BaseModel):
    class Config:
        extra = Extra.forbid

    model: Model32
    min_distance_fault_center: Optional[float] = Field(
        None, alias='min distance fault center'
    )
    max_distance_fault_center: Optional[float] = Field(
        None, alias='max distance fault center'
    )
    compositions: List[int] = Field(
        ..., max_items=4294967295, min_items=0, unique_items=False
    )
    rotation_matrices: Optional[List[RotationMatrice]] = Field(
        None,
        alias='rotation matrices',
        max_items=4294967295,
        min_items=0,
        unique_items=False,
    )
    Euler_angles_z_x_z: Optional[List[EulerAnglesZXZItem]] = Field(
        None,
        alias='Euler angles z-x-z',
        max_items=4294967295,
        min_items=0,
        unique_items=False,
    )
    orientation_operation: Optional[OrientationOperation2] = Field(
        None, alias='orientation operation'
    )
    grain_sizes: Optional[List[float]] = Field(
        None, alias='grain sizes', max_items=4294967295, min_items=0, unique_items=False
    )


class Segment1(BaseModel):
    class Config:
        extra = Extra.forbid

    length: float
    thickness: List[float] = Field(..., max_items=2, min_items=1)
    top_truncation: Optional[List[float]] = Field(
        None, alias='top truncation', max_items=2, min_items=1
    )
    angle: List[float] = Field(..., max_items=2, min_items=1)
    temperature_models: Optional[
        List[Union[TemperatureModel9, TemperatureModel10, TemperatureModel11]]
    ] = Field(None, alias='temperature models')
    composition_models: Optional[
        List[Union[CompositionModel5, CompositionModel6]]
    ] = Field(None, alias='composition models')
    grains_models: Optional[List[Union[GrainsModel6, GrainsModel7]]] = Field(
        None, alias='grains models'
    )


class Model33(Enum):
    adiabatic = 'adiabatic'


class Operation19(Enum):
    replace = 'replace'
    add = 'add'
    subtract = 'subtract'


class TemperatureModel12(BaseModel):
    class Config:
        extra = Extra.forbid

    model: Model33
    operation: Optional[Operation19] = None
    min_distance_fault_center: Optional[float] = Field(
        None, alias='min distance fault center'
    )
    max_distance_fault_center: Optional[float] = Field(
        None, alias='max distance fault center'
    )
    potential_mantle_temperature: Optional[float] = Field(
        None, alias='potential mantle temperature'
    )
    thermal_expansion_coefficient: Optional[float] = Field(
        None, alias='thermal expansion coefficient'
    )
    specific_heat: Optional[float] = Field(None, alias='specific heat')


class Model34(Enum):
    linear = 'linear'


class TemperatureModel13(BaseModel):
    class Config:
        extra = Extra.forbid

    model: Model34
    operation: Optional[Operation19] = None
    min_distance_fault_center: Optional[float] = Field(
        None, alias='min distance fault center'
    )
    max_distance_fault_center: float = Field(..., alias='max distance fault center')
    center_temperature: Optional[float] = Field(None, alias='center temperature')
    side_temperature: Optional[float] = Field(None, alias='side temperature')


class Model35(Enum):
    uniform = 'uniform'


class TemperatureModel14(BaseModel):
    class Config:
        extra = Extra.forbid

    model: Model35
    operation: Optional[Operation19] = None
    min_distance_fault_center: Optional[float] = Field(
        None, alias='min distance fault center'
    )
    max_distance_fault_center: Optional[float] = Field(
        None, alias='max distance fault center'
    )
    temperature: float


class Model36(Enum):
    smooth = 'smooth'


class Operation22(Enum):
    replace = 'replace'
    replace_defined_only = 'replace defined only'
    add = 'add'
    subtract = 'subtract'


class CompositionModel7(BaseModel):
    class Config:
        extra = Extra.forbid

    model: Model36
    min_distance_fault_center: Optional[float] = Field(
        None, alias='min distance fault center'
    )
    side_distance_fault_center: Optional[float] = Field(
        None, alias='side distance fault center'
    )
    center_fractions: Optional[List[float]] = Field(
        None,
        alias='center fractions',
        max_items=4294967295,
        min_items=1,
        unique_items=False,
    )
    side_fractions: Optional[List[float]] = Field(
        None,
        alias='side fractions',
        max_items=4294967295,
        min_items=1,
        unique_items=False,
    )
    compositions: List[int] = Field(
        ..., max_items=4294967295, min_items=0, unique_items=False
    )
    operation: Optional[Operation22] = None


class Model37(Enum):
    uniform = 'uniform'


class CompositionModel8(BaseModel):
    class Config:
        extra = Extra.forbid

    model: Model37
    min_distance_fault_center: Optional[float] = Field(
        None, alias='min distance fault center'
    )
    max_distance_fault_center: Optional[float] = Field(
        None, alias='max distance fault center'
    )
    compositions: List[int] = Field(
        ..., max_items=4294967295, min_items=0, unique_items=False
    )
    fractions: Optional[List[float]] = Field(
        None, max_items=4294967295, min_items=1, unique_items=False
    )
    operation: Optional[Operation22] = None


class Model38(Enum):
    random_uniform_distribution = 'random uniform distribution'


class GrainsModel8(BaseModel):
    class Config:
        extra = Extra.forbid

    model: Model38
    min_distance_fault_center: Optional[float] = Field(
        None, alias='min distance fault center'
    )
    max_distance_fault_center: Optional[float] = Field(
        None, alias='max distance fault center'
    )
    compositions: List[int] = Field(
        ..., max_items=4294967295, min_items=0, unique_items=False
    )
    orientation_operation: Optional[OrientationOperation2] = Field(
        None, alias='orientation operation'
    )
    grain_sizes: Optional[List[float]] = Field(
        None, alias='grain sizes', max_items=4294967295, min_items=0, unique_items=False
    )
    normalize_grain_sizes: Optional[List[bool]] = Field(
        None,
        alias='normalize grain sizes',
        max_items=4294967295,
        min_items=0,
        unique_items=False,
    )


class Model39(Enum):
    uniform = 'uniform'


class GrainsModel9(BaseModel):
    class Config:
        extra = Extra.forbid

    model: Model39
    min_distance_fault_center: Optional[float] = Field(
        None, alias='min distance fault center'
    )
    max_distance_fault_center: Optional[float] = Field(
        None, alias='max distance fault center'
    )
    compositions: List[int] = Field(
        ..., max_items=4294967295, min_items=0, unique_items=False
    )
    rotation_matrices: Optional[List[RotationMatrice]] = Field(
        None,
        alias='rotation matrices',
        max_items=4294967295,
        min_items=0,
        unique_items=False,
    )
    Euler_angles_z_x_z: Optional[List[EulerAnglesZXZItem]] = Field(
        None,
        alias='Euler angles z-x-z',
        max_items=4294967295,
        min_items=0,
        unique_items=False,
    )
    orientation_operation: Optional[OrientationOperation2] = Field(
        None, alias='orientation operation'
    )
    grain_sizes: Optional[List[float]] = Field(
        None, alias='grain sizes', max_items=4294967295, min_items=0, unique_items=False
    )


class Section(BaseModel):
    min_depth: Optional[float] = Field(None, alias='min depth')
    max_depth: Optional[float] = Field(None, alias='max depth')
    dip_point: Optional[List[float]] = Field(
        None, alias='dip point', max_items=2, min_items=2
    )
    segments: Optional[List[Segment1]] = Field(
        None, max_items=4294967295, min_items=0, unique_items=False
    )
    temperature_models: Optional[
        List[Union[TemperatureModel12, TemperatureModel13, TemperatureModel14]]
    ] = Field(None, alias='temperature models')
    composition_models: Optional[
        List[Union[CompositionModel7, CompositionModel8]]
    ] = Field(None, alias='composition models')
    grains_models: Optional[List[Union[GrainsModel8, GrainsModel9]]] = Field(
        None, alias='grains models'
    )
    coordinate: Optional[int] = None


class Feature1(BaseModel):
    class Config:
        extra = Extra.forbid

    model: Model11
    name: Optional[str] = None
    coordinates: Optional[List[Coordinate]] = Field(
        None, max_items=4294967295, min_items=1, unique_items=False
    )
    interpolation: Optional[str] = None
    min_depth: Optional[float] = Field(None, alias='min depth')
    max_depth: Optional[float] = Field(None, alias='max depth')
    dip_point: Optional[List[float]] = Field(
        None, alias='dip point', max_items=2, min_items=2
    )
    segments: Optional[List[Segment]] = Field(
        None, max_items=4294967295, min_items=0, unique_items=False
    )
    temperature_models: Optional[
        List[Union[TemperatureModel6, TemperatureModel7, TemperatureModel8]]
    ] = Field(None, alias='temperature models')
    composition_models: Optional[
        List[Union[CompositionModel3, CompositionModel4]]
    ] = Field(None, alias='composition models')
    grains_models: Optional[List[Union[GrainsModel4, GrainsModel5]]] = Field(
        None, alias='grains models'
    )
    sections: Optional[List[Section]] = Field(
        None, max_items=4294967295, min_items=0, unique_items=False
    )


class Model40(Enum):
    mantle_layer = 'mantle layer'


class Model41(Enum):
    adiabatic = 'adiabatic'


class Operation24(Enum):
    replace = 'replace'
    add = 'add'
    subtract = 'subtract'


class TemperatureModel15(BaseModel):
    class Config:
        extra = Extra.forbid

    model: Model41
    operation: Optional[Operation24] = None
    min_depth: Optional[Union[float, List[MinDepthItem]]] = Field(
        None, alias='min depth'
    )
    max_depth: Optional[Union[float, List[MaxDepthItem]]] = Field(
        None, alias='max depth'
    )
    potential_mantle_temperature: Optional[float] = Field(
        None, alias='potential mantle temperature'
    )
    thermal_expansion_coefficient: Optional[float] = Field(
        None, alias='thermal expansion coefficient'
    )
    specific_heat: Optional[float] = Field(None, alias='specific heat')


class Model42(Enum):
    linear = 'linear'


class TemperatureModel16(BaseModel):
    class Config:
        extra = Extra.forbid

    model: Model42
    operation: Optional[Operation24] = None
    min_depth: Optional[Union[float, List[MinDepthItem]]] = Field(
        None, alias='min depth'
    )
    max_depth: Union[float, List[MaxDepthItem]] = Field(..., alias='max depth')
    top_temperature: Optional[float] = Field(None, alias='top temperature')
    bottom_temperature: Optional[float] = Field(None, alias='bottom temperature')


class Model43(Enum):
    uniform = 'uniform'


class TemperatureModel17(BaseModel):
    class Config:
        extra = Extra.forbid

    model: Model43
    operation: Optional[Operation24] = None
    min_depth: Optional[Union[float, List[MinDepthItem]]] = Field(
        None, alias='min depth'
    )
    max_depth: Optional[Union[float, List[MaxDepthItem]]] = Field(
        None, alias='max depth'
    )
    temperature: float


class Operation27(Enum):
    replace = 'replace'
    replace_defined_only = 'replace defined only'
    add = 'add'
    subtract = 'subtract'


class CompositionModel9(BaseModel):
    class Config:
        extra = Extra.forbid

    model: Model43
    min_depth: Optional[Union[float, List[MinDepthItem]]] = Field(
        None, alias='min depth'
    )
    max_depth: Optional[Union[float, List[MaxDepthItem]]] = Field(
        None, alias='max depth'
    )
    compositions: List[int] = Field(
        ..., max_items=4294967295, min_items=0, unique_items=False
    )
    fractions: Optional[List[float]] = Field(
        None, max_items=4294967295, min_items=1, unique_items=False
    )
    operation: Optional[Operation27] = None


class Model45(Enum):
    random_uniform_distribution = 'random uniform distribution'


class GrainsModel10(BaseModel):
    class Config:
        extra = Extra.forbid

    model: Model45
    min_depth: Optional[Union[float, List[MinDepthItem]]] = Field(
        None, alias='min depth'
    )
    max_depth: Optional[Union[float, List[MaxDepthItem]]] = Field(
        None, alias='max depth'
    )
    compositions: List[int] = Field(
        ..., max_items=4294967295, min_items=0, unique_items=False
    )
    orientation_operation: Optional[OrientationOperation2] = Field(
        None, alias='orientation operation'
    )
    grain_sizes: Optional[List[float]] = Field(
        None, alias='grain sizes', max_items=4294967295, min_items=0, unique_items=False
    )
    normalize_grain_sizes: Optional[List[bool]] = Field(
        None,
        alias='normalize grain sizes',
        max_items=4294967295,
        min_items=0,
        unique_items=False,
    )


class Model46(Enum):
    uniform = 'uniform'


class GrainsModel11(BaseModel):
    class Config:
        extra = Extra.forbid

    model: Model46
    min_depth: Optional[Union[float, List[MinDepthItem]]] = Field(
        None, alias='min depth'
    )
    max_depth: Optional[Union[float, List[MaxDepthItem]]] = Field(
        None, alias='max depth'
    )
    compositions: List[int] = Field(
        ..., max_items=4294967295, min_items=0, unique_items=False
    )
    rotation_matrices: Optional[List[RotationMatrice]] = Field(
        None,
        alias='rotation matrices',
        max_items=4294967295,
        min_items=0,
        unique_items=False,
    )
    Euler_angles_z_x_z: Optional[List[EulerAnglesZXZItem]] = Field(
        None,
        alias='Euler angles z-x-z',
        max_items=4294967295,
        min_items=0,
        unique_items=False,
    )
    orientation_operation: Optional[OrientationOperation2] = Field(
        None, alias='orientation operation'
    )
    grain_sizes: Optional[List[float]] = Field(
        None, alias='grain sizes', max_items=4294967295, min_items=0, unique_items=False
    )


class Feature2(BaseModel):
    class Config:
        extra = Extra.forbid

    model: Model40
    name: Optional[str] = None
    coordinates: Optional[List[Coordinate]] = Field(
        None, max_items=4294967295, min_items=1, unique_items=False
    )
    interpolation: Optional[str] = None
    min_depth: Optional[Union[float, List[MinDepthItem]]] = Field(
        None, alias='min depth'
    )
    max_depth: Optional[Union[float, List[MaxDepthItem]]] = Field(
        None, alias='max depth'
    )
    temperature_models: Optional[
        List[Union[TemperatureModel15, TemperatureModel16, TemperatureModel17]]
    ] = Field(None, alias='temperature models')
    composition_models: Optional[List[CompositionModel9]] = Field(
        None, alias='composition models'
    )
    grains_models: Optional[List[Union[GrainsModel10, GrainsModel11]]] = Field(
        None, alias='grains models'
    )


class Model47(Enum):
    oceanic_plate = 'oceanic plate'


class Model48(Enum):
    adiabatic = 'adiabatic'


class Operation28(Enum):
    replace = 'replace'
    add = 'add'
    subtract = 'subtract'


class TemperatureModel18(BaseModel):
    class Config:
        extra = Extra.forbid

    model: Model48
    operation: Optional[Operation28] = None
    min_depth: Optional[Union[float, List[MinDepthItem]]] = Field(
        None, alias='min depth'
    )
    max_depth: Optional[Union[float, List[MaxDepthItem]]] = Field(
        None, alias='max depth'
    )
    potential_mantle_temperature: Optional[float] = Field(
        None, alias='potential mantle temperature'
    )
    thermal_expansion_coefficient: Optional[float] = Field(
        None, alias='thermal expansion coefficient'
    )
    specific_heat: Optional[float] = Field(None, alias='specific heat')


class Model49(Enum):
    half_space_model = 'half space model'


class RidgeCoordinate(BaseModel):
    __root__: List[Any]


class TemperatureModel19(BaseModel):
    class Config:
        extra = Extra.forbid

    model: Model49
    operation: Optional[Operation28] = None
    min_depth: Optional[Union[float, List[MinDepthItem]]] = Field(
        None, alias='min depth'
    )
    max_depth: Union[float, List[MaxDepthItem]] = Field(..., alias='max depth')
    top_temperature: Optional[float] = Field(None, alias='top temperature')
    bottom_temperature: Optional[float] = Field(None, alias='bottom temperature')
    spreading_velocity: float = Field(..., alias='spreading velocity')
    ridge_coordinates: List[RidgeCoordinate] = Field(
        ...,
        alias='ridge coordinates',
        max_items=4294967295,
        min_items=1,
        unique_items=False,
    )


class Model50(Enum):
    linear = 'linear'


class TemperatureModel20(BaseModel):
    class Config:
        extra = Extra.forbid

    model: Model50
    operation: Optional[Operation28] = None
    min_depth: Optional[Union[float, List[MinDepthItem]]] = Field(
        None, alias='min depth'
    )
    max_depth: Union[float, List[MaxDepthItem]] = Field(..., alias='max depth')
    top_temperature: Optional[float] = Field(None, alias='top temperature')
    bottom_temperature: Optional[float] = Field(None, alias='bottom temperature')


class Model51(Enum):
    plate_model = 'plate model'


class TemperatureModel21(BaseModel):
    class Config:
        extra = Extra.forbid

    model: Model51
    operation: Optional[Operation28] = None
    min_depth: Optional[Union[float, List[MinDepthItem]]] = Field(
        None, alias='min depth'
    )
    max_depth: Union[float, List[MaxDepthItem]] = Field(..., alias='max depth')
    top_temperature: Optional[float] = Field(None, alias='top temperature')
    bottom_temperature: Optional[float] = Field(None, alias='bottom temperature')
    spreading_velocity: Optional[float] = Field(None, alias='spreading velocity')
    ridge_coordinates: Optional[List[RidgeCoordinate]] = Field(
        None,
        alias='ridge coordinates',
        max_items=4294967295,
        min_items=1,
        unique_items=False,
    )


class Model52(Enum):
    plate_model_constant_age = 'plate model constant age'


class TemperatureModel22(BaseModel):
    class Config:
        extra = Extra.forbid

    model: Model52
    operation: Optional[Operation28] = None
    min_depth: Optional[Union[float, List[MinDepthItem]]] = Field(
        None, alias='min depth'
    )
    max_depth: Union[float, List[MaxDepthItem]] = Field(..., alias='max depth')
    top_temperature: Optional[float] = Field(None, alias='top temperature')
    bottom_temperature: Optional[float] = Field(None, alias='bottom temperature')
    plate_age: Optional[float] = Field(None, alias='plate age')


class Model53(Enum):
    uniform = 'uniform'


class TemperatureModel23(BaseModel):
    class Config:
        extra = Extra.forbid

    model: Model53
    operation: Optional[Operation28] = None
    min_depth: Optional[Union[float, List[MinDepthItem]]] = Field(
        None, alias='min depth'
    )
    max_depth: Optional[Union[float, List[MaxDepthItem]]] = Field(
        None, alias='max depth'
    )
    temperature: float


class Operation34(Enum):
    replace = 'replace'
    replace_defined_only = 'replace defined only'
    add = 'add'
    subtract = 'subtract'


class CompositionModel10(BaseModel):
    class Config:
        extra = Extra.forbid

    model: Model53
    min_depth: Optional[Union[float, List[MinDepthItem]]] = Field(
        None, alias='min depth'
    )
    max_depth: Optional[Union[float, List[MaxDepthItem]]] = Field(
        None, alias='max depth'
    )
    compositions: List[int] = Field(
        ..., max_items=4294967295, min_items=0, unique_items=False
    )
    fractions: Optional[List[float]] = Field(
        None, max_items=4294967295, min_items=1, unique_items=False
    )
    operation: Optional[Operation34] = None


class Model55(Enum):
    random_uniform_distribution = 'random uniform distribution'


class GrainsModel12(BaseModel):
    class Config:
        extra = Extra.forbid

    model: Model55
    min_depth: Optional[Union[float, List[MinDepthItem]]] = Field(
        None, alias='min depth'
    )
    max_depth: Optional[Union[float, List[MaxDepthItem]]] = Field(
        None, alias='max depth'
    )
    compositions: List[int] = Field(
        ..., max_items=4294967295, min_items=0, unique_items=False
    )
    orientation_operation: Optional[OrientationOperation2] = Field(
        None, alias='orientation operation'
    )
    grain_sizes: Optional[List[float]] = Field(
        None, alias='grain sizes', max_items=4294967295, min_items=0, unique_items=False
    )
    normalize_grain_sizes: Optional[List[bool]] = Field(
        None,
        alias='normalize grain sizes',
        max_items=4294967295,
        min_items=0,
        unique_items=False,
    )


class Model56(Enum):
    uniform = 'uniform'


class GrainsModel13(BaseModel):
    class Config:
        extra = Extra.forbid

    model: Model56
    min_depth: Optional[Union[float, List[MinDepthItem]]] = Field(
        None, alias='min depth'
    )
    max_depth: Optional[Union[float, List[MaxDepthItem]]] = Field(
        None, alias='max depth'
    )
    compositions: List[int] = Field(
        ..., max_items=4294967295, min_items=0, unique_items=False
    )
    rotation_matrices: Optional[List[RotationMatrice]] = Field(
        None,
        alias='rotation matrices',
        max_items=4294967295,
        min_items=0,
        unique_items=False,
    )
    Euler_angles_z_x_z: Optional[List[EulerAnglesZXZItem]] = Field(
        None,
        alias='Euler angles z-x-z',
        max_items=4294967295,
        min_items=0,
        unique_items=False,
    )
    orientation_operation: Optional[OrientationOperation2] = Field(
        None, alias='orientation operation'
    )
    grain_sizes: Optional[List[float]] = Field(
        None, alias='grain sizes', max_items=4294967295, min_items=0, unique_items=False
    )


class Feature3(BaseModel):
    class Config:
        extra = Extra.forbid

    model: Model47
    name: Optional[str] = None
    coordinates: Optional[List[Coordinate]] = Field(
        None, max_items=4294967295, min_items=1, unique_items=False
    )
    interpolation: Optional[str] = None
    min_depth: Optional[Union[float, List[MinDepthItem]]] = Field(
        None, alias='min depth'
    )
    max_depth: Optional[Union[float, List[MaxDepthItem]]] = Field(
        None, alias='max depth'
    )
    temperature_models: Optional[
        List[
            Union[
                TemperatureModel18,
                TemperatureModel19,
                TemperatureModel20,
                TemperatureModel21,
                TemperatureModel22,
                TemperatureModel23,
            ]
        ]
    ] = Field(None, alias='temperature models')
    composition_models: Optional[List[CompositionModel10]] = Field(
        None, alias='composition models'
    )
    grains_models: Optional[List[Union[GrainsModel12, GrainsModel13]]] = Field(
        None, alias='grains models'
    )


class Model57(Enum):
    subducting_plate = 'subducting plate'


class Model58(Enum):
    adiabatic = 'adiabatic'


class Operation35(Enum):
    replace = 'replace'
    add = 'add'
    subtract = 'subtract'


class TemperatureModel24(BaseModel):
    class Config:
        extra = Extra.forbid

    model: Model58
    operation: Optional[Operation35] = None
    min_distance_slab_top: Optional[float] = Field(None, alias='min distance slab top')
    max_distance_slab_top: Optional[float] = Field(None, alias='max distance slab top')
    potential_mantle_temperature: Optional[float] = Field(
        None, alias='potential mantle temperature'
    )
    thermal_expansion_coefficient: Optional[float] = Field(
        None, alias='thermal expansion coefficient'
    )
    specific_heat: Optional[float] = Field(None, alias='specific heat')


class Model59(Enum):
    linear = 'linear'


class TemperatureModel25(BaseModel):
    class Config:
        extra = Extra.forbid

    model: Model59
    operation: Optional[Operation35] = None
    min_distance_slab_top: Optional[float] = Field(None, alias='min distance slab top')
    max_distance_slab_top: float = Field(..., alias='max distance slab top')
    top_temperature: Optional[float] = Field(None, alias='top temperature')
    bottom_temperature: Optional[float] = Field(None, alias='bottom temperature')


class Model60(Enum):
    mass_conserving = 'mass conserving'


class TemperatureModel26(BaseModel):
    class Config:
        extra = Extra.forbid

    model: Model60
    operation: Optional[Operation35] = None
    min_distance_slab_top: Optional[float] = Field(None, alias='min distance slab top')
    max_distance_slab_top: Optional[float] = Field(None, alias='max distance slab top')
    density: Optional[float] = None
    plate_velocity: float = Field(..., alias='plate velocity')
    coupling_depth: Optional[float] = Field(None, alias='coupling depth')
    forearc_cooling_factor: Optional[float] = Field(
        None, alias='forearc cooling factor'
    )
    thermal_conductivity: Optional[float] = Field(None, alias='thermal conductivity')
    thermal_expansion_coefficient: Optional[float] = Field(
        None, alias='thermal expansion coefficient'
    )
    specific_heat: Optional[float] = Field(None, alias='specific heat')
    thermal_diffusivity: Optional[float] = Field(None, alias='thermal diffusivity')
    adiabatic_heating: Optional[bool] = Field(None, alias='adiabatic heating')
    taper_distance: Optional[float] = Field(None, alias='taper distance')
    potential_mantle_temperature: Optional[float] = Field(
        None, alias='potential mantle temperature'
    )
    ridge_coordinates: Optional[List[RidgeCoordinate]] = Field(
        None,
        alias='ridge coordinates',
        max_items=4294967295,
        min_items=1,
        unique_items=False,
    )


class Model61(Enum):
    plate_model = 'plate model'


class TemperatureModel27(BaseModel):
    class Config:
        extra = Extra.forbid

    model: Model61
    operation: Optional[Operation35] = None
    min_distance_slab_top: Optional[float] = Field(None, alias='min distance slab top')
    max_distance_slab_top: Optional[float] = Field(None, alias='max distance slab top')
    density: Optional[float] = None
    plate_velocity: float = Field(..., alias='plate velocity')
    thermal_conductivity: Optional[float] = Field(None, alias='thermal conductivity')
    thermal_expansion_coefficient: Optional[float] = Field(
        None, alias='thermal expansion coefficient'
    )
    specific_heat: Optional[float] = Field(None, alias='specific heat')
    adiabatic_heating: Optional[bool] = Field(None, alias='adiabatic heating')
    potential_mantle_temperature: Optional[float] = Field(
        None, alias='potential mantle temperature'
    )


class Model62(Enum):
    uniform = 'uniform'


class TemperatureModel28(BaseModel):
    class Config:
        extra = Extra.forbid

    model: Model62
    operation: Optional[Operation35] = None
    min_distance_slab_top: Optional[float] = Field(None, alias='min distance slab top')
    max_distance_slab_top: Optional[float] = Field(None, alias='max distance slab top')
    temperature: float


class Model63(Enum):
    smooth = 'smooth'


class Operation40(Enum):
    replace = 'replace'
    replace_defined_only = 'replace defined only'
    add = 'add'
    subtract = 'subtract'


class CompositionModel11(BaseModel):
    class Config:
        extra = Extra.forbid

    model: Model63
    min_distance_slab_top: Optional[float] = Field(None, alias='min distance slab top')
    max_distance_slab_top: Optional[float] = Field(None, alias='max distance slab top')
    top_fractions: Optional[List[float]] = Field(
        None,
        alias='top fractions',
        max_items=4294967295,
        min_items=1,
        unique_items=False,
    )
    bottom_fractions: Optional[List[float]] = Field(
        None,
        alias='bottom fractions',
        max_items=4294967295,
        min_items=1,
        unique_items=False,
    )
    compositions: List[int] = Field(
        ..., max_items=4294967295, min_items=0, unique_items=False
    )
    operation: Optional[Operation40] = None


class Model64(Enum):
    uniform = 'uniform'


class CompositionModel12(BaseModel):
    class Config:
        extra = Extra.forbid

    model: Model64
    min_distance_slab_top: Optional[float] = Field(None, alias='min distance slab top')
    max_distance_slab_top: Optional[float] = Field(None, alias='max distance slab top')
    compositions: List[int] = Field(
        ..., max_items=4294967295, min_items=0, unique_items=False
    )
    fractions: Optional[List[float]] = Field(
        None, max_items=4294967295, min_items=1, unique_items=False
    )
    operation: Optional[Operation40] = None


class Model65(Enum):
    random_uniform_distribution = 'random uniform distribution'


class GrainsModel14(BaseModel):
    class Config:
        extra = Extra.forbid

    model: Model65
    min_distance_slab_top: Optional[float] = Field(None, alias='min distance slab top')
    max_distance_slab_top: Optional[float] = Field(None, alias='max distance slab top')
    compositions: List[int] = Field(
        ..., max_items=4294967295, min_items=0, unique_items=False
    )
    orientation_operation: Optional[OrientationOperation2] = Field(
        None, alias='orientation operation'
    )
    grain_sizes: Optional[List[float]] = Field(
        None, alias='grain sizes', max_items=4294967295, min_items=0, unique_items=False
    )
    normalize_grain_sizes: Optional[List[bool]] = Field(
        None,
        alias='normalize grain sizes',
        max_items=4294967295,
        min_items=0,
        unique_items=False,
    )


class Model66(Enum):
    uniform = 'uniform'


class GrainsModel15(BaseModel):
    class Config:
        extra = Extra.forbid

    model: Model66
    min_distance_slab_top: Optional[float] = Field(None, alias='min distance slab top')
    max_distance_slab_top: Optional[float] = Field(None, alias='max distance slab top')
    compositions: List[int] = Field(
        ..., max_items=4294967295, min_items=0, unique_items=False
    )
    rotation_matrices: Optional[List[RotationMatrice]] = Field(
        None,
        alias='rotation matrices',
        max_items=4294967295,
        min_items=0,
        unique_items=False,
    )
    Euler_angles_z_x_z: Optional[List[EulerAnglesZXZItem]] = Field(
        None,
        alias='Euler angles z-x-z',
        max_items=4294967295,
        min_items=0,
        unique_items=False,
    )
    orientation_operation: Optional[OrientationOperation2] = Field(
        None, alias='orientation operation'
    )
    grain_sizes: Optional[List[float]] = Field(
        None, alias='grain sizes', max_items=4294967295, min_items=0, unique_items=False
    )


class Item(BaseModel):
    __root__: List[Any]


class Model67(Enum):
    adiabatic = 'adiabatic'


class Operation42(Enum):
    replace = 'replace'
    add = 'add'
    subtract = 'subtract'


class TemperatureModel29(BaseModel):
    class Config:
        extra = Extra.forbid

    model: Model67
    operation: Optional[Operation42] = None
    min_distance_slab_top: Optional[float] = Field(None, alias='min distance slab top')
    max_distance_slab_top: Optional[float] = Field(None, alias='max distance slab top')
    potential_mantle_temperature: Optional[float] = Field(
        None, alias='potential mantle temperature'
    )
    thermal_expansion_coefficient: Optional[float] = Field(
        None, alias='thermal expansion coefficient'
    )
    specific_heat: Optional[float] = Field(None, alias='specific heat')


class Model68(Enum):
    linear = 'linear'


class TemperatureModel30(BaseModel):
    class Config:
        extra = Extra.forbid

    model: Model68
    operation: Optional[Operation42] = None
    min_distance_slab_top: Optional[float] = Field(None, alias='min distance slab top')
    max_distance_slab_top: float = Field(..., alias='max distance slab top')
    top_temperature: Optional[float] = Field(None, alias='top temperature')
    bottom_temperature: Optional[float] = Field(None, alias='bottom temperature')


class Model69(Enum):
    mass_conserving = 'mass conserving'


class TemperatureModel31(BaseModel):
    class Config:
        extra = Extra.forbid

    model: Model69
    operation: Optional[Operation42] = None
    min_distance_slab_top: Optional[float] = Field(None, alias='min distance slab top')
    max_distance_slab_top: Optional[float] = Field(None, alias='max distance slab top')
    density: Optional[float] = None
    plate_velocity: float = Field(..., alias='plate velocity')
    coupling_depth: Optional[float] = Field(None, alias='coupling depth')
    forearc_cooling_factor: Optional[float] = Field(
        None, alias='forearc cooling factor'
    )
    thermal_conductivity: Optional[float] = Field(None, alias='thermal conductivity')
    thermal_expansion_coefficient: Optional[float] = Field(
        None, alias='thermal expansion coefficient'
    )
    specific_heat: Optional[float] = Field(None, alias='specific heat')
    thermal_diffusivity: Optional[float] = Field(None, alias='thermal diffusivity')
    adiabatic_heating: Optional[bool] = Field(None, alias='adiabatic heating')
    taper_distance: Optional[float] = Field(None, alias='taper distance')
    potential_mantle_temperature: Optional[float] = Field(
        None, alias='potential mantle temperature'
    )
    ridge_coordinates: Optional[List[RidgeCoordinate]] = Field(
        None,
        alias='ridge coordinates',
        max_items=4294967295,
        min_items=1,
        unique_items=False,
    )


class Model70(Enum):
    plate_model = 'plate model'


class TemperatureModel32(BaseModel):
    class Config:
        extra = Extra.forbid

    model: Model70
    operation: Optional[Operation42] = None
    min_distance_slab_top: Optional[float] = Field(None, alias='min distance slab top')
    max_distance_slab_top: Optional[float] = Field(None, alias='max distance slab top')
    density: Optional[float] = None
    plate_velocity: float = Field(..., alias='plate velocity')
    thermal_conductivity: Optional[float] = Field(None, alias='thermal conductivity')
    thermal_expansion_coefficient: Optional[float] = Field(
        None, alias='thermal expansion coefficient'
    )
    specific_heat: Optional[float] = Field(None, alias='specific heat')
    adiabatic_heating: Optional[bool] = Field(None, alias='adiabatic heating')
    potential_mantle_temperature: Optional[float] = Field(
        None, alias='potential mantle temperature'
    )


class Model71(Enum):
    uniform = 'uniform'


class TemperatureModel33(BaseModel):
    class Config:
        extra = Extra.forbid

    model: Model71
    operation: Optional[Operation42] = None
    min_distance_slab_top: Optional[float] = Field(None, alias='min distance slab top')
    max_distance_slab_top: Optional[float] = Field(None, alias='max distance slab top')
    temperature: float


class Model72(Enum):
    smooth = 'smooth'


class Operation47(Enum):
    replace = 'replace'
    replace_defined_only = 'replace defined only'
    add = 'add'
    subtract = 'subtract'


class CompositionModel13(BaseModel):
    class Config:
        extra = Extra.forbid

    model: Model72
    min_distance_slab_top: Optional[float] = Field(None, alias='min distance slab top')
    max_distance_slab_top: Optional[float] = Field(None, alias='max distance slab top')
    top_fractions: Optional[List[float]] = Field(
        None,
        alias='top fractions',
        max_items=4294967295,
        min_items=1,
        unique_items=False,
    )
    bottom_fractions: Optional[List[float]] = Field(
        None,
        alias='bottom fractions',
        max_items=4294967295,
        min_items=1,
        unique_items=False,
    )
    compositions: List[int] = Field(
        ..., max_items=4294967295, min_items=0, unique_items=False
    )
    operation: Optional[Operation47] = None


class Model73(Enum):
    uniform = 'uniform'


class CompositionModel14(BaseModel):
    class Config:
        extra = Extra.forbid

    model: Model73
    min_distance_slab_top: Optional[float] = Field(None, alias='min distance slab top')
    max_distance_slab_top: Optional[float] = Field(None, alias='max distance slab top')
    compositions: List[int] = Field(
        ..., max_items=4294967295, min_items=0, unique_items=False
    )
    fractions: Optional[List[float]] = Field(
        None, max_items=4294967295, min_items=1, unique_items=False
    )
    operation: Optional[Operation47] = None


class Model74(Enum):
    random_uniform_distribution = 'random uniform distribution'


class GrainsModel16(BaseModel):
    class Config:
        extra = Extra.forbid

    model: Model74
    min_distance_slab_top: Optional[float] = Field(None, alias='min distance slab top')
    max_distance_slab_top: Optional[float] = Field(None, alias='max distance slab top')
    compositions: List[int] = Field(
        ..., max_items=4294967295, min_items=0, unique_items=False
    )
    orientation_operation: Optional[OrientationOperation2] = Field(
        None, alias='orientation operation'
    )
    grain_sizes: Optional[List[float]] = Field(
        None, alias='grain sizes', max_items=4294967295, min_items=0, unique_items=False
    )
    normalize_grain_sizes: Optional[List[bool]] = Field(
        None,
        alias='normalize grain sizes',
        max_items=4294967295,
        min_items=0,
        unique_items=False,
    )


class Model75(Enum):
    uniform = 'uniform'


class GrainsModel17(BaseModel):
    class Config:
        extra = Extra.forbid

    model: Model75
    min_distance_slab_top: Optional[float] = Field(None, alias='min distance slab top')
    max_distance_slab_top: Optional[float] = Field(None, alias='max distance slab top')
    compositions: List[int] = Field(
        ..., max_items=4294967295, min_items=0, unique_items=False
    )
    rotation_matrices: Optional[List[RotationMatrice]] = Field(
        None,
        alias='rotation matrices',
        max_items=4294967295,
        min_items=0,
        unique_items=False,
    )
    Euler_angles_z_x_z: Optional[List[EulerAnglesZXZItem]] = Field(
        None,
        alias='Euler angles z-x-z',
        max_items=4294967295,
        min_items=0,
        unique_items=False,
    )
    orientation_operation: Optional[OrientationOperation2] = Field(
        None, alias='orientation operation'
    )
    grain_sizes: Optional[List[float]] = Field(
        None, alias='grain sizes', max_items=4294967295, min_items=0, unique_items=False
    )


class ContourItem(BaseModel):
    items: Optional[List[Item]] = Field(
        None, max_items=4294967295, min_items=0, unique_items=False
    )
    length: Optional[float] = None
    thickness: Optional[float] = None
    top_truncation: Optional[float] = Field(None, alias='top truncation')
    angle_constraint: Optional[float] = Field(None, alias='angle constraint')
    temperature_models: Optional[
        List[
            Union[
                TemperatureModel29,
                TemperatureModel30,
                TemperatureModel31,
                TemperatureModel32,
                TemperatureModel33,
            ]
        ]
    ] = Field(None, alias='temperature models')
    composition_models: Optional[
        List[Union[CompositionModel13, CompositionModel14]]
    ] = Field(None, alias='composition models')
    grains_models: Optional[List[Union[GrainsModel16, GrainsModel17]]] = Field(
        None, alias='grains models'
    )


class Contour(BaseModel):
    length: Optional[float] = None
    thickness: Optional[float] = None
    top_truncation: Optional[float] = Field(None, alias='top truncation')
    angle_constraint: Optional[float] = Field(None, alias='angle constraint')
    temperature_models: Optional[
        List[
            Union[
                TemperatureModel24,
                TemperatureModel25,
                TemperatureModel26,
                TemperatureModel27,
                TemperatureModel28,
            ]
        ]
    ] = Field(None, alias='temperature models')
    composition_models: Optional[
        List[Union[CompositionModel11, CompositionModel12]]
    ] = Field(None, alias='composition models')
    grains_models: Optional[List[Union[GrainsModel14, GrainsModel15]]] = Field(
        None, alias='grains models'
    )
    contour: Optional[List[ContourItem]] = Field(
        None, max_items=100000, min_items=1, unique_items=False
    )


class Model76(Enum):
    adiabatic = 'adiabatic'


class Operation49(Enum):
    replace = 'replace'
    add = 'add'
    subtract = 'subtract'


class TemperatureModel34(BaseModel):
    class Config:
        extra = Extra.forbid

    model: Model76
    operation: Optional[Operation49] = None
    min_distance_slab_top: Optional[float] = Field(None, alias='min distance slab top')
    max_distance_slab_top: Optional[float] = Field(None, alias='max distance slab top')
    potential_mantle_temperature: Optional[float] = Field(
        None, alias='potential mantle temperature'
    )
    thermal_expansion_coefficient: Optional[float] = Field(
        None, alias='thermal expansion coefficient'
    )
    specific_heat: Optional[float] = Field(None, alias='specific heat')


class Model77(Enum):
    linear = 'linear'


class TemperatureModel35(BaseModel):
    class Config:
        extra = Extra.forbid

    model: Model77
    operation: Optional[Operation49] = None
    min_distance_slab_top: Optional[float] = Field(None, alias='min distance slab top')
    max_distance_slab_top: float = Field(..., alias='max distance slab top')
    top_temperature: Optional[float] = Field(None, alias='top temperature')
    bottom_temperature: Optional[float] = Field(None, alias='bottom temperature')


class Model78(Enum):
    mass_conserving = 'mass conserving'


class TemperatureModel36(BaseModel):
    class Config:
        extra = Extra.forbid

    model: Model78
    operation: Optional[Operation49] = None
    min_distance_slab_top: Optional[float] = Field(None, alias='min distance slab top')
    max_distance_slab_top: Optional[float] = Field(None, alias='max distance slab top')
    density: Optional[float] = None
    plate_velocity: float = Field(..., alias='plate velocity')
    coupling_depth: Optional[float] = Field(None, alias='coupling depth')
    forearc_cooling_factor: Optional[float] = Field(
        None, alias='forearc cooling factor'
    )
    thermal_conductivity: Optional[float] = Field(None, alias='thermal conductivity')
    thermal_expansion_coefficient: Optional[float] = Field(
        None, alias='thermal expansion coefficient'
    )
    specific_heat: Optional[float] = Field(None, alias='specific heat')
    thermal_diffusivity: Optional[float] = Field(None, alias='thermal diffusivity')
    adiabatic_heating: Optional[bool] = Field(None, alias='adiabatic heating')
    taper_distance: Optional[float] = Field(None, alias='taper distance')
    potential_mantle_temperature: Optional[float] = Field(
        None, alias='potential mantle temperature'
    )
    ridge_coordinates: Optional[List[RidgeCoordinate]] = Field(
        None,
        alias='ridge coordinates',
        max_items=4294967295,
        min_items=1,
        unique_items=False,
    )


class Model79(Enum):
    plate_model = 'plate model'


class TemperatureModel37(BaseModel):
    class Config:
        extra = Extra.forbid

    model: Model79
    operation: Optional[Operation49] = None
    min_distance_slab_top: Optional[float] = Field(None, alias='min distance slab top')
    max_distance_slab_top: Optional[float] = Field(None, alias='max distance slab top')
    density: Optional[float] = None
    plate_velocity: float = Field(..., alias='plate velocity')
    thermal_conductivity: Optional[float] = Field(None, alias='thermal conductivity')
    thermal_expansion_coefficient: Optional[float] = Field(
        None, alias='thermal expansion coefficient'
    )
    specific_heat: Optional[float] = Field(None, alias='specific heat')
    adiabatic_heating: Optional[bool] = Field(None, alias='adiabatic heating')
    potential_mantle_temperature: Optional[float] = Field(
        None, alias='potential mantle temperature'
    )


class Model80(Enum):
    uniform = 'uniform'


class TemperatureModel38(BaseModel):
    class Config:
        extra = Extra.forbid

    model: Model80
    operation: Optional[Operation49] = None
    min_distance_slab_top: Optional[float] = Field(None, alias='min distance slab top')
    max_distance_slab_top: Optional[float] = Field(None, alias='max distance slab top')
    temperature: float


class Model81(Enum):
    smooth = 'smooth'


class Operation54(Enum):
    replace = 'replace'
    replace_defined_only = 'replace defined only'
    add = 'add'
    subtract = 'subtract'


class CompositionModel15(BaseModel):
    class Config:
        extra = Extra.forbid

    model: Model81
    min_distance_slab_top: Optional[float] = Field(None, alias='min distance slab top')
    max_distance_slab_top: Optional[float] = Field(None, alias='max distance slab top')
    top_fractions: Optional[List[float]] = Field(
        None,
        alias='top fractions',
        max_items=4294967295,
        min_items=1,
        unique_items=False,
    )
    bottom_fractions: Optional[List[float]] = Field(
        None,
        alias='bottom fractions',
        max_items=4294967295,
        min_items=1,
        unique_items=False,
    )
    compositions: List[int] = Field(
        ..., max_items=4294967295, min_items=0, unique_items=False
    )
    operation: Optional[Operation54] = None


class Model82(Enum):
    uniform = 'uniform'


class CompositionModel16(BaseModel):
    class Config:
        extra = Extra.forbid

    model: Model82
    min_distance_slab_top: Optional[float] = Field(None, alias='min distance slab top')
    max_distance_slab_top: Optional[float] = Field(None, alias='max distance slab top')
    compositions: List[int] = Field(
        ..., max_items=4294967295, min_items=0, unique_items=False
    )
    fractions: Optional[List[float]] = Field(
        None, max_items=4294967295, min_items=1, unique_items=False
    )
    operation: Optional[Operation54] = None


class Model83(Enum):
    random_uniform_distribution = 'random uniform distribution'


class GrainsModel18(BaseModel):
    class Config:
        extra = Extra.forbid

    model: Model83
    min_distance_slab_top: Optional[float] = Field(None, alias='min distance slab top')
    max_distance_slab_top: Optional[float] = Field(None, alias='max distance slab top')
    compositions: List[int] = Field(
        ..., max_items=4294967295, min_items=0, unique_items=False
    )
    orientation_operation: Optional[OrientationOperation2] = Field(
        None, alias='orientation operation'
    )
    grain_sizes: Optional[List[float]] = Field(
        None, alias='grain sizes', max_items=4294967295, min_items=0, unique_items=False
    )
    normalize_grain_sizes: Optional[List[bool]] = Field(
        None,
        alias='normalize grain sizes',
        max_items=4294967295,
        min_items=0,
        unique_items=False,
    )


class Model84(Enum):
    uniform = 'uniform'


class GrainsModel19(BaseModel):
    class Config:
        extra = Extra.forbid

    model: Model84
    min_distance_slab_top: Optional[float] = Field(None, alias='min distance slab top')
    max_distance_slab_top: Optional[float] = Field(None, alias='max distance slab top')
    compositions: List[int] = Field(
        ..., max_items=4294967295, min_items=0, unique_items=False
    )
    rotation_matrices: Optional[List[RotationMatrice]] = Field(
        None,
        alias='rotation matrices',
        max_items=4294967295,
        min_items=0,
        unique_items=False,
    )
    Euler_angles_z_x_z: Optional[List[EulerAnglesZXZItem]] = Field(
        None,
        alias='Euler angles z-x-z',
        max_items=4294967295,
        min_items=0,
        unique_items=False,
    )
    orientation_operation: Optional[OrientationOperation2] = Field(
        None, alias='orientation operation'
    )
    grain_sizes: Optional[List[float]] = Field(
        None, alias='grain sizes', max_items=4294967295, min_items=0, unique_items=False
    )


class Segment2(BaseModel):
    class Config:
        extra = Extra.forbid

    length: float
    thickness: List[float] = Field(..., max_items=2, min_items=1)
    top_truncation: Optional[List[float]] = Field(
        None, alias='top truncation', max_items=2, min_items=1
    )
    angle: List[float] = Field(..., max_items=2, min_items=1)
    temperature_models: Optional[
        List[
            Union[
                TemperatureModel34,
                TemperatureModel35,
                TemperatureModel36,
                TemperatureModel37,
                TemperatureModel38,
            ]
        ]
    ] = Field(None, alias='temperature models')
    composition_models: Optional[
        List[Union[CompositionModel15, CompositionModel16]]
    ] = Field(None, alias='composition models')
    grains_models: Optional[List[Union[GrainsModel18, GrainsModel19]]] = Field(
        None, alias='grains models'
    )


class Model85(Enum):
    adiabatic = 'adiabatic'


class Operation56(Enum):
    replace = 'replace'
    add = 'add'
    subtract = 'subtract'


class TemperatureModel39(BaseModel):
    class Config:
        extra = Extra.forbid

    model: Model85
    operation: Optional[Operation56] = None
    min_distance_slab_top: Optional[float] = Field(None, alias='min distance slab top')
    max_distance_slab_top: Optional[float] = Field(None, alias='max distance slab top')
    potential_mantle_temperature: Optional[float] = Field(
        None, alias='potential mantle temperature'
    )
    thermal_expansion_coefficient: Optional[float] = Field(
        None, alias='thermal expansion coefficient'
    )
    specific_heat: Optional[float] = Field(None, alias='specific heat')


class Model86(Enum):
    linear = 'linear'


class TemperatureModel40(BaseModel):
    class Config:
        extra = Extra.forbid

    model: Model86
    operation: Optional[Operation56] = None
    min_distance_slab_top: Optional[float] = Field(None, alias='min distance slab top')
    max_distance_slab_top: float = Field(..., alias='max distance slab top')
    top_temperature: Optional[float] = Field(None, alias='top temperature')
    bottom_temperature: Optional[float] = Field(None, alias='bottom temperature')


class Model87(Enum):
    mass_conserving = 'mass conserving'


class TemperatureModel41(BaseModel):
    class Config:
        extra = Extra.forbid

    model: Model87
    operation: Optional[Operation56] = None
    min_distance_slab_top: Optional[float] = Field(None, alias='min distance slab top')
    max_distance_slab_top: Optional[float] = Field(None, alias='max distance slab top')
    density: Optional[float] = None
    plate_velocity: float = Field(..., alias='plate velocity')
    coupling_depth: Optional[float] = Field(None, alias='coupling depth')
    forearc_cooling_factor: Optional[float] = Field(
        None, alias='forearc cooling factor'
    )
    thermal_conductivity: Optional[float] = Field(None, alias='thermal conductivity')
    thermal_expansion_coefficient: Optional[float] = Field(
        None, alias='thermal expansion coefficient'
    )
    specific_heat: Optional[float] = Field(None, alias='specific heat')
    thermal_diffusivity: Optional[float] = Field(None, alias='thermal diffusivity')
    adiabatic_heating: Optional[bool] = Field(None, alias='adiabatic heating')
    taper_distance: Optional[float] = Field(None, alias='taper distance')
    potential_mantle_temperature: Optional[float] = Field(
        None, alias='potential mantle temperature'
    )
    ridge_coordinates: Optional[List[RidgeCoordinate]] = Field(
        None,
        alias='ridge coordinates',
        max_items=4294967295,
        min_items=1,
        unique_items=False,
    )


class Model88(Enum):
    plate_model = 'plate model'


class TemperatureModel42(BaseModel):
    class Config:
        extra = Extra.forbid

    model: Model88
    operation: Optional[Operation56] = None
    min_distance_slab_top: Optional[float] = Field(None, alias='min distance slab top')
    max_distance_slab_top: Optional[float] = Field(None, alias='max distance slab top')
    density: Optional[float] = None
    plate_velocity: float = Field(..., alias='plate velocity')
    thermal_conductivity: Optional[float] = Field(None, alias='thermal conductivity')
    thermal_expansion_coefficient: Optional[float] = Field(
        None, alias='thermal expansion coefficient'
    )
    specific_heat: Optional[float] = Field(None, alias='specific heat')
    adiabatic_heating: Optional[bool] = Field(None, alias='adiabatic heating')
    potential_mantle_temperature: Optional[float] = Field(
        None, alias='potential mantle temperature'
    )


class Model89(Enum):
    uniform = 'uniform'


class TemperatureModel43(BaseModel):
    class Config:
        extra = Extra.forbid

    model: Model89
    operation: Optional[Operation56] = None
    min_distance_slab_top: Optional[float] = Field(None, alias='min distance slab top')
    max_distance_slab_top: Optional[float] = Field(None, alias='max distance slab top')
    temperature: float


class Model90(Enum):
    smooth = 'smooth'


class Operation61(Enum):
    replace = 'replace'
    replace_defined_only = 'replace defined only'
    add = 'add'
    subtract = 'subtract'


class CompositionModel17(BaseModel):
    class Config:
        extra = Extra.forbid

    model: Model90
    min_distance_slab_top: Optional[float] = Field(None, alias='min distance slab top')
    max_distance_slab_top: Optional[float] = Field(None, alias='max distance slab top')
    top_fractions: Optional[List[float]] = Field(
        None,
        alias='top fractions',
        max_items=4294967295,
        min_items=1,
        unique_items=False,
    )
    bottom_fractions: Optional[List[float]] = Field(
        None,
        alias='bottom fractions',
        max_items=4294967295,
        min_items=1,
        unique_items=False,
    )
    compositions: List[int] = Field(
        ..., max_items=4294967295, min_items=0, unique_items=False
    )
    operation: Optional[Operation61] = None


class Model91(Enum):
    uniform = 'uniform'


class CompositionModel18(BaseModel):
    class Config:
        extra = Extra.forbid

    model: Model91
    min_distance_slab_top: Optional[float] = Field(None, alias='min distance slab top')
    max_distance_slab_top: Optional[float] = Field(None, alias='max distance slab top')
    compositions: List[int] = Field(
        ..., max_items=4294967295, min_items=0, unique_items=False
    )
    fractions: Optional[List[float]] = Field(
        None, max_items=4294967295, min_items=1, unique_items=False
    )
    operation: Optional[Operation61] = None


class Model92(Enum):
    random_uniform_distribution = 'random uniform distribution'


class GrainsModel20(BaseModel):
    class Config:
        extra = Extra.forbid

    model: Model92
    min_distance_slab_top: Optional[float] = Field(None, alias='min distance slab top')
    max_distance_slab_top: Optional[float] = Field(None, alias='max distance slab top')
    compositions: List[int] = Field(
        ..., max_items=4294967295, min_items=0, unique_items=False
    )
    orientation_operation: Optional[OrientationOperation2] = Field(
        None, alias='orientation operation'
    )
    grain_sizes: Optional[List[float]] = Field(
        None, alias='grain sizes', max_items=4294967295, min_items=0, unique_items=False
    )
    normalize_grain_sizes: Optional[List[bool]] = Field(
        None,
        alias='normalize grain sizes',
        max_items=4294967295,
        min_items=0,
        unique_items=False,
    )


class Model93(Enum):
    uniform = 'uniform'


class GrainsModel21(BaseModel):
    class Config:
        extra = Extra.forbid

    model: Model93
    min_distance_slab_top: Optional[float] = Field(None, alias='min distance slab top')
    max_distance_slab_top: Optional[float] = Field(None, alias='max distance slab top')
    compositions: List[int] = Field(
        ..., max_items=4294967295, min_items=0, unique_items=False
    )
    rotation_matrices: Optional[List[RotationMatrice]] = Field(
        None,
        alias='rotation matrices',
        max_items=4294967295,
        min_items=0,
        unique_items=False,
    )
    Euler_angles_z_x_z: Optional[List[EulerAnglesZXZItem]] = Field(
        None,
        alias='Euler angles z-x-z',
        max_items=4294967295,
        min_items=0,
        unique_items=False,
    )
    orientation_operation: Optional[OrientationOperation2] = Field(
        None, alias='orientation operation'
    )
    grain_sizes: Optional[List[float]] = Field(
        None, alias='grain sizes', max_items=4294967295, min_items=0, unique_items=False
    )


class Model94(Enum):
    adiabatic = 'adiabatic'


class Operation63(Enum):
    replace = 'replace'
    add = 'add'
    subtract = 'subtract'


class TemperatureModel44(BaseModel):
    class Config:
        extra = Extra.forbid

    model: Model94
    operation: Optional[Operation63] = None
    min_distance_slab_top: Optional[float] = Field(None, alias='min distance slab top')
    max_distance_slab_top: Optional[float] = Field(None, alias='max distance slab top')
    potential_mantle_temperature: Optional[float] = Field(
        None, alias='potential mantle temperature'
    )
    thermal_expansion_coefficient: Optional[float] = Field(
        None, alias='thermal expansion coefficient'
    )
    specific_heat: Optional[float] = Field(None, alias='specific heat')


class Model95(Enum):
    linear = 'linear'


class TemperatureModel45(BaseModel):
    class Config:
        extra = Extra.forbid

    model: Model95
    operation: Optional[Operation63] = None
    min_distance_slab_top: Optional[float] = Field(None, alias='min distance slab top')
    max_distance_slab_top: float = Field(..., alias='max distance slab top')
    top_temperature: Optional[float] = Field(None, alias='top temperature')
    bottom_temperature: Optional[float] = Field(None, alias='bottom temperature')


class Model96(Enum):
    mass_conserving = 'mass conserving'


class TemperatureModel46(BaseModel):
    class Config:
        extra = Extra.forbid

    model: Model96
    operation: Optional[Operation63] = None
    min_distance_slab_top: Optional[float] = Field(None, alias='min distance slab top')
    max_distance_slab_top: Optional[float] = Field(None, alias='max distance slab top')
    density: Optional[float] = None
    plate_velocity: float = Field(..., alias='plate velocity')
    coupling_depth: Optional[float] = Field(None, alias='coupling depth')
    forearc_cooling_factor: Optional[float] = Field(
        None, alias='forearc cooling factor'
    )
    thermal_conductivity: Optional[float] = Field(None, alias='thermal conductivity')
    thermal_expansion_coefficient: Optional[float] = Field(
        None, alias='thermal expansion coefficient'
    )
    specific_heat: Optional[float] = Field(None, alias='specific heat')
    thermal_diffusivity: Optional[float] = Field(None, alias='thermal diffusivity')
    adiabatic_heating: Optional[bool] = Field(None, alias='adiabatic heating')
    taper_distance: Optional[float] = Field(None, alias='taper distance')
    potential_mantle_temperature: Optional[float] = Field(
        None, alias='potential mantle temperature'
    )
    ridge_coordinates: Optional[List[RidgeCoordinate]] = Field(
        None,
        alias='ridge coordinates',
        max_items=4294967295,
        min_items=1,
        unique_items=False,
    )


class Model97(Enum):
    plate_model = 'plate model'


class TemperatureModel47(BaseModel):
    class Config:
        extra = Extra.forbid

    model: Model97
    operation: Optional[Operation63] = None
    min_distance_slab_top: Optional[float] = Field(None, alias='min distance slab top')
    max_distance_slab_top: Optional[float] = Field(None, alias='max distance slab top')
    density: Optional[float] = None
    plate_velocity: float = Field(..., alias='plate velocity')
    thermal_conductivity: Optional[float] = Field(None, alias='thermal conductivity')
    thermal_expansion_coefficient: Optional[float] = Field(
        None, alias='thermal expansion coefficient'
    )
    specific_heat: Optional[float] = Field(None, alias='specific heat')
    adiabatic_heating: Optional[bool] = Field(None, alias='adiabatic heating')
    potential_mantle_temperature: Optional[float] = Field(
        None, alias='potential mantle temperature'
    )


class Model98(Enum):
    uniform = 'uniform'


class TemperatureModel48(BaseModel):
    class Config:
        extra = Extra.forbid

    model: Model98
    operation: Optional[Operation63] = None
    min_distance_slab_top: Optional[float] = Field(None, alias='min distance slab top')
    max_distance_slab_top: Optional[float] = Field(None, alias='max distance slab top')
    temperature: float


class Model99(Enum):
    smooth = 'smooth'


class Operation68(Enum):
    replace = 'replace'
    replace_defined_only = 'replace defined only'
    add = 'add'
    subtract = 'subtract'


class CompositionModel19(BaseModel):
    class Config:
        extra = Extra.forbid

    model: Model99
    min_distance_slab_top: Optional[float] = Field(None, alias='min distance slab top')
    max_distance_slab_top: Optional[float] = Field(None, alias='max distance slab top')
    top_fractions: Optional[List[float]] = Field(
        None,
        alias='top fractions',
        max_items=4294967295,
        min_items=1,
        unique_items=False,
    )
    bottom_fractions: Optional[List[float]] = Field(
        None,
        alias='bottom fractions',
        max_items=4294967295,
        min_items=1,
        unique_items=False,
    )
    compositions: List[int] = Field(
        ..., max_items=4294967295, min_items=0, unique_items=False
    )
    operation: Optional[Operation68] = None


class Model100(Enum):
    uniform = 'uniform'


class CompositionModel20(BaseModel):
    class Config:
        extra = Extra.forbid

    model: Model100
    min_distance_slab_top: Optional[float] = Field(None, alias='min distance slab top')
    max_distance_slab_top: Optional[float] = Field(None, alias='max distance slab top')
    compositions: List[int] = Field(
        ..., max_items=4294967295, min_items=0, unique_items=False
    )
    fractions: Optional[List[float]] = Field(
        None, max_items=4294967295, min_items=1, unique_items=False
    )
    operation: Optional[Operation68] = None


class Model101(Enum):
    random_uniform_distribution = 'random uniform distribution'


class GrainsModel22(BaseModel):
    class Config:
        extra = Extra.forbid

    model: Model101
    min_distance_slab_top: Optional[float] = Field(None, alias='min distance slab top')
    max_distance_slab_top: Optional[float] = Field(None, alias='max distance slab top')
    compositions: List[int] = Field(
        ..., max_items=4294967295, min_items=0, unique_items=False
    )
    orientation_operation: Optional[OrientationOperation2] = Field(
        None, alias='orientation operation'
    )
    grain_sizes: Optional[List[float]] = Field(
        None, alias='grain sizes', max_items=4294967295, min_items=0, unique_items=False
    )
    normalize_grain_sizes: Optional[List[bool]] = Field(
        None,
        alias='normalize grain sizes',
        max_items=4294967295,
        min_items=0,
        unique_items=False,
    )


class Model102(Enum):
    uniform = 'uniform'


class GrainsModel23(BaseModel):
    class Config:
        extra = Extra.forbid

    model: Model102
    min_distance_slab_top: Optional[float] = Field(None, alias='min distance slab top')
    max_distance_slab_top: Optional[float] = Field(None, alias='max distance slab top')
    compositions: List[int] = Field(
        ..., max_items=4294967295, min_items=0, unique_items=False
    )
    rotation_matrices: Optional[List[RotationMatrice]] = Field(
        None,
        alias='rotation matrices',
        max_items=4294967295,
        min_items=0,
        unique_items=False,
    )
    Euler_angles_z_x_z: Optional[List[EulerAnglesZXZItem]] = Field(
        None,
        alias='Euler angles z-x-z',
        max_items=4294967295,
        min_items=0,
        unique_items=False,
    )
    orientation_operation: Optional[OrientationOperation2] = Field(
        None, alias='orientation operation'
    )
    grain_sizes: Optional[List[float]] = Field(
        None, alias='grain sizes', max_items=4294967295, min_items=0, unique_items=False
    )


class Model103(Enum):
    adiabatic = 'adiabatic'


class Operation70(Enum):
    replace = 'replace'
    add = 'add'
    subtract = 'subtract'


class TemperatureModel49(BaseModel):
    class Config:
        extra = Extra.forbid

    model: Model103
    operation: Optional[Operation70] = None
    min_distance_slab_top: Optional[float] = Field(None, alias='min distance slab top')
    max_distance_slab_top: Optional[float] = Field(None, alias='max distance slab top')
    potential_mantle_temperature: Optional[float] = Field(
        None, alias='potential mantle temperature'
    )
    thermal_expansion_coefficient: Optional[float] = Field(
        None, alias='thermal expansion coefficient'
    )
    specific_heat: Optional[float] = Field(None, alias='specific heat')


class Model104(Enum):
    linear = 'linear'


class TemperatureModel50(BaseModel):
    class Config:
        extra = Extra.forbid

    model: Model104
    operation: Optional[Operation70] = None
    min_distance_slab_top: Optional[float] = Field(None, alias='min distance slab top')
    max_distance_slab_top: float = Field(..., alias='max distance slab top')
    top_temperature: Optional[float] = Field(None, alias='top temperature')
    bottom_temperature: Optional[float] = Field(None, alias='bottom temperature')


class Model105(Enum):
    mass_conserving = 'mass conserving'


class TemperatureModel51(BaseModel):
    class Config:
        extra = Extra.forbid

    model: Model105
    operation: Optional[Operation70] = None
    min_distance_slab_top: Optional[float] = Field(None, alias='min distance slab top')
    max_distance_slab_top: Optional[float] = Field(None, alias='max distance slab top')
    density: Optional[float] = None
    plate_velocity: float = Field(..., alias='plate velocity')
    coupling_depth: Optional[float] = Field(None, alias='coupling depth')
    forearc_cooling_factor: Optional[float] = Field(
        None, alias='forearc cooling factor'
    )
    thermal_conductivity: Optional[float] = Field(None, alias='thermal conductivity')
    thermal_expansion_coefficient: Optional[float] = Field(
        None, alias='thermal expansion coefficient'
    )
    specific_heat: Optional[float] = Field(None, alias='specific heat')
    thermal_diffusivity: Optional[float] = Field(None, alias='thermal diffusivity')
    adiabatic_heating: Optional[bool] = Field(None, alias='adiabatic heating')
    taper_distance: Optional[float] = Field(None, alias='taper distance')
    potential_mantle_temperature: Optional[float] = Field(
        None, alias='potential mantle temperature'
    )
    ridge_coordinates: Optional[List[RidgeCoordinate]] = Field(
        None,
        alias='ridge coordinates',
        max_items=4294967295,
        min_items=1,
        unique_items=False,
    )


class Model106(Enum):
    plate_model = 'plate model'


class TemperatureModel52(BaseModel):
    class Config:
        extra = Extra.forbid

    model: Model106
    operation: Optional[Operation70] = None
    min_distance_slab_top: Optional[float] = Field(None, alias='min distance slab top')
    max_distance_slab_top: Optional[float] = Field(None, alias='max distance slab top')
    density: Optional[float] = None
    plate_velocity: float = Field(..., alias='plate velocity')
    thermal_conductivity: Optional[float] = Field(None, alias='thermal conductivity')
    thermal_expansion_coefficient: Optional[float] = Field(
        None, alias='thermal expansion coefficient'
    )
    specific_heat: Optional[float] = Field(None, alias='specific heat')
    adiabatic_heating: Optional[bool] = Field(None, alias='adiabatic heating')
    potential_mantle_temperature: Optional[float] = Field(
        None, alias='potential mantle temperature'
    )


class Model107(Enum):
    uniform = 'uniform'


class TemperatureModel53(BaseModel):
    class Config:
        extra = Extra.forbid

    model: Model107
    operation: Optional[Operation70] = None
    min_distance_slab_top: Optional[float] = Field(None, alias='min distance slab top')
    max_distance_slab_top: Optional[float] = Field(None, alias='max distance slab top')
    temperature: float


class Model108(Enum):
    smooth = 'smooth'


class Operation75(Enum):
    replace = 'replace'
    replace_defined_only = 'replace defined only'
    add = 'add'
    subtract = 'subtract'


class CompositionModel21(BaseModel):
    class Config:
        extra = Extra.forbid

    model: Model108
    min_distance_slab_top: Optional[float] = Field(None, alias='min distance slab top')
    max_distance_slab_top: Optional[float] = Field(None, alias='max distance slab top')
    top_fractions: Optional[List[float]] = Field(
        None,
        alias='top fractions',
        max_items=4294967295,
        min_items=1,
        unique_items=False,
    )
    bottom_fractions: Optional[List[float]] = Field(
        None,
        alias='bottom fractions',
        max_items=4294967295,
        min_items=1,
        unique_items=False,
    )
    compositions: List[int] = Field(
        ..., max_items=4294967295, min_items=0, unique_items=False
    )
    operation: Optional[Operation75] = None


class Model109(Enum):
    uniform = 'uniform'


class CompositionModel22(BaseModel):
    class Config:
        extra = Extra.forbid

    model: Model109
    min_distance_slab_top: Optional[float] = Field(None, alias='min distance slab top')
    max_distance_slab_top: Optional[float] = Field(None, alias='max distance slab top')
    compositions: List[int] = Field(
        ..., max_items=4294967295, min_items=0, unique_items=False
    )
    fractions: Optional[List[float]] = Field(
        None, max_items=4294967295, min_items=1, unique_items=False
    )
    operation: Optional[Operation75] = None


class Model110(Enum):
    random_uniform_distribution = 'random uniform distribution'


class GrainsModel24(BaseModel):
    class Config:
        extra = Extra.forbid

    model: Model110
    min_distance_slab_top: Optional[float] = Field(None, alias='min distance slab top')
    max_distance_slab_top: Optional[float] = Field(None, alias='max distance slab top')
    compositions: List[int] = Field(
        ..., max_items=4294967295, min_items=0, unique_items=False
    )
    orientation_operation: Optional[OrientationOperation2] = Field(
        None, alias='orientation operation'
    )
    grain_sizes: Optional[List[float]] = Field(
        None, alias='grain sizes', max_items=4294967295, min_items=0, unique_items=False
    )
    normalize_grain_sizes: Optional[List[bool]] = Field(
        None,
        alias='normalize grain sizes',
        max_items=4294967295,
        min_items=0,
        unique_items=False,
    )


class Model111(Enum):
    uniform = 'uniform'


class GrainsModel25(BaseModel):
    class Config:
        extra = Extra.forbid

    model: Model111
    min_distance_slab_top: Optional[float] = Field(None, alias='min distance slab top')
    max_distance_slab_top: Optional[float] = Field(None, alias='max distance slab top')
    compositions: List[int] = Field(
        ..., max_items=4294967295, min_items=0, unique_items=False
    )
    rotation_matrices: Optional[List[RotationMatrice]] = Field(
        None,
        alias='rotation matrices',
        max_items=4294967295,
        min_items=0,
        unique_items=False,
    )
    Euler_angles_z_x_z: Optional[List[EulerAnglesZXZItem]] = Field(
        None,
        alias='Euler angles z-x-z',
        max_items=4294967295,
        min_items=0,
        unique_items=False,
    )
    orientation_operation: Optional[OrientationOperation2] = Field(
        None, alias='orientation operation'
    )
    grain_sizes: Optional[List[float]] = Field(
        None, alias='grain sizes', max_items=4294967295, min_items=0, unique_items=False
    )


class ContourItem1(BaseModel):
    items: Optional[List[Item]] = Field(
        None, max_items=4294967295, min_items=0, unique_items=False
    )
    length: Optional[float] = None
    thickness: Optional[float] = None
    top_truncation: Optional[float] = Field(None, alias='top truncation')
    angle_constraint: Optional[float] = Field(None, alias='angle constraint')
    temperature_models: Optional[
        List[
            Union[
                TemperatureModel49,
                TemperatureModel50,
                TemperatureModel51,
                TemperatureModel52,
                TemperatureModel53,
            ]
        ]
    ] = Field(None, alias='temperature models')
    composition_models: Optional[
        List[Union[CompositionModel21, CompositionModel22]]
    ] = Field(None, alias='composition models')
    grains_models: Optional[List[Union[GrainsModel24, GrainsModel25]]] = Field(
        None, alias='grains models'
    )


class Contour1(BaseModel):
    length: Optional[float] = None
    thickness: Optional[float] = None
    top_truncation: Optional[float] = Field(None, alias='top truncation')
    angle_constraint: Optional[float] = Field(None, alias='angle constraint')
    temperature_models: Optional[
        List[
            Union[
                TemperatureModel44,
                TemperatureModel45,
                TemperatureModel46,
                TemperatureModel47,
                TemperatureModel48,
            ]
        ]
    ] = Field(None, alias='temperature models')
    composition_models: Optional[
        List[Union[CompositionModel19, CompositionModel20]]
    ] = Field(None, alias='composition models')
    grains_models: Optional[List[Union[GrainsModel22, GrainsModel23]]] = Field(
        None, alias='grains models'
    )
    contour: Optional[List[ContourItem1]] = Field(
        None, max_items=100000, min_items=1, unique_items=False
    )


class Model112(Enum):
    adiabatic = 'adiabatic'


class Operation77(Enum):
    replace = 'replace'
    add = 'add'
    subtract = 'subtract'


class TemperatureModel54(BaseModel):
    class Config:
        extra = Extra.forbid

    model: Model112
    operation: Optional[Operation77] = None
    min_distance_slab_top: Optional[float] = Field(None, alias='min distance slab top')
    max_distance_slab_top: Optional[float] = Field(None, alias='max distance slab top')
    potential_mantle_temperature: Optional[float] = Field(
        None, alias='potential mantle temperature'
    )
    thermal_expansion_coefficient: Optional[float] = Field(
        None, alias='thermal expansion coefficient'
    )
    specific_heat: Optional[float] = Field(None, alias='specific heat')


class Model113(Enum):
    linear = 'linear'


class TemperatureModel55(BaseModel):
    class Config:
        extra = Extra.forbid

    model: Model113
    operation: Optional[Operation77] = None
    min_distance_slab_top: Optional[float] = Field(None, alias='min distance slab top')
    max_distance_slab_top: float = Field(..., alias='max distance slab top')
    top_temperature: Optional[float] = Field(None, alias='top temperature')
    bottom_temperature: Optional[float] = Field(None, alias='bottom temperature')


class Model114(Enum):
    mass_conserving = 'mass conserving'


class TemperatureModel56(BaseModel):
    class Config:
        extra = Extra.forbid

    model: Model114
    operation: Optional[Operation77] = None
    min_distance_slab_top: Optional[float] = Field(None, alias='min distance slab top')
    max_distance_slab_top: Optional[float] = Field(None, alias='max distance slab top')
    density: Optional[float] = None
    plate_velocity: float = Field(..., alias='plate velocity')
    coupling_depth: Optional[float] = Field(None, alias='coupling depth')
    forearc_cooling_factor: Optional[float] = Field(
        None, alias='forearc cooling factor'
    )
    thermal_conductivity: Optional[float] = Field(None, alias='thermal conductivity')
    thermal_expansion_coefficient: Optional[float] = Field(
        None, alias='thermal expansion coefficient'
    )
    specific_heat: Optional[float] = Field(None, alias='specific heat')
    thermal_diffusivity: Optional[float] = Field(None, alias='thermal diffusivity')
    adiabatic_heating: Optional[bool] = Field(None, alias='adiabatic heating')
    taper_distance: Optional[float] = Field(None, alias='taper distance')
    potential_mantle_temperature: Optional[float] = Field(
        None, alias='potential mantle temperature'
    )
    ridge_coordinates: Optional[List[RidgeCoordinate]] = Field(
        None,
        alias='ridge coordinates',
        max_items=4294967295,
        min_items=1,
        unique_items=False,
    )


class Model115(Enum):
    plate_model = 'plate model'


class TemperatureModel57(BaseModel):
    class Config:
        extra = Extra.forbid

    model: Model115
    operation: Optional[Operation77] = None
    min_distance_slab_top: Optional[float] = Field(None, alias='min distance slab top')
    max_distance_slab_top: Optional[float] = Field(None, alias='max distance slab top')
    density: Optional[float] = None
    plate_velocity: float = Field(..., alias='plate velocity')
    thermal_conductivity: Optional[float] = Field(None, alias='thermal conductivity')
    thermal_expansion_coefficient: Optional[float] = Field(
        None, alias='thermal expansion coefficient'
    )
    specific_heat: Optional[float] = Field(None, alias='specific heat')
    adiabatic_heating: Optional[bool] = Field(None, alias='adiabatic heating')
    potential_mantle_temperature: Optional[float] = Field(
        None, alias='potential mantle temperature'
    )


class Model116(Enum):
    uniform = 'uniform'


class TemperatureModel58(BaseModel):
    class Config:
        extra = Extra.forbid

    model: Model116
    operation: Optional[Operation77] = None
    min_distance_slab_top: Optional[float] = Field(None, alias='min distance slab top')
    max_distance_slab_top: Optional[float] = Field(None, alias='max distance slab top')
    temperature: float


class Model117(Enum):
    smooth = 'smooth'


class Operation82(Enum):
    replace = 'replace'
    replace_defined_only = 'replace defined only'
    add = 'add'
    subtract = 'subtract'


class CompositionModel23(BaseModel):
    class Config:
        extra = Extra.forbid

    model: Model117
    min_distance_slab_top: Optional[float] = Field(None, alias='min distance slab top')
    max_distance_slab_top: Optional[float] = Field(None, alias='max distance slab top')
    top_fractions: Optional[List[float]] = Field(
        None,
        alias='top fractions',
        max_items=4294967295,
        min_items=1,
        unique_items=False,
    )
    bottom_fractions: Optional[List[float]] = Field(
        None,
        alias='bottom fractions',
        max_items=4294967295,
        min_items=1,
        unique_items=False,
    )
    compositions: List[int] = Field(
        ..., max_items=4294967295, min_items=0, unique_items=False
    )
    operation: Optional[Operation82] = None


class Model118(Enum):
    uniform = 'uniform'


class CompositionModel24(BaseModel):
    class Config:
        extra = Extra.forbid

    model: Model118
    min_distance_slab_top: Optional[float] = Field(None, alias='min distance slab top')
    max_distance_slab_top: Optional[float] = Field(None, alias='max distance slab top')
    compositions: List[int] = Field(
        ..., max_items=4294967295, min_items=0, unique_items=False
    )
    fractions: Optional[List[float]] = Field(
        None, max_items=4294967295, min_items=1, unique_items=False
    )
    operation: Optional[Operation82] = None


class Model119(Enum):
    random_uniform_distribution = 'random uniform distribution'


class GrainsModel26(BaseModel):
    class Config:
        extra = Extra.forbid

    model: Model119
    min_distance_slab_top: Optional[float] = Field(None, alias='min distance slab top')
    max_distance_slab_top: Optional[float] = Field(None, alias='max distance slab top')
    compositions: List[int] = Field(
        ..., max_items=4294967295, min_items=0, unique_items=False
    )
    orientation_operation: Optional[OrientationOperation2] = Field(
        None, alias='orientation operation'
    )
    grain_sizes: Optional[List[float]] = Field(
        None, alias='grain sizes', max_items=4294967295, min_items=0, unique_items=False
    )
    normalize_grain_sizes: Optional[List[bool]] = Field(
        None,
        alias='normalize grain sizes',
        max_items=4294967295,
        min_items=0,
        unique_items=False,
    )


class Model120(Enum):
    uniform = 'uniform'


class GrainsModel27(BaseModel):
    class Config:
        extra = Extra.forbid

    model: Model120
    min_distance_slab_top: Optional[float] = Field(None, alias='min distance slab top')
    max_distance_slab_top: Optional[float] = Field(None, alias='max distance slab top')
    compositions: List[int] = Field(
        ..., max_items=4294967295, min_items=0, unique_items=False
    )
    rotation_matrices: Optional[List[RotationMatrice]] = Field(
        None,
        alias='rotation matrices',
        max_items=4294967295,
        min_items=0,
        unique_items=False,
    )
    Euler_angles_z_x_z: Optional[List[EulerAnglesZXZItem]] = Field(
        None,
        alias='Euler angles z-x-z',
        max_items=4294967295,
        min_items=0,
        unique_items=False,
    )
    orientation_operation: Optional[OrientationOperation2] = Field(
        None, alias='orientation operation'
    )
    grain_sizes: Optional[List[float]] = Field(
        None, alias='grain sizes', max_items=4294967295, min_items=0, unique_items=False
    )


class Segment3(BaseModel):
    class Config:
        extra = Extra.forbid

    length: float
    thickness: List[float] = Field(..., max_items=2, min_items=1)
    top_truncation: Optional[List[float]] = Field(
        None, alias='top truncation', max_items=2, min_items=1
    )
    angle: List[float] = Field(..., max_items=2, min_items=1)
    temperature_models: Optional[
        List[
            Union[
                TemperatureModel54,
                TemperatureModel55,
                TemperatureModel56,
                TemperatureModel57,
                TemperatureModel58,
            ]
        ]
    ] = Field(None, alias='temperature models')
    composition_models: Optional[
        List[Union[CompositionModel23, CompositionModel24]]
    ] = Field(None, alias='composition models')
    grains_models: Optional[List[Union[GrainsModel26, GrainsModel27]]] = Field(
        None, alias='grains models'
    )


class Model121(Enum):
    adiabatic = 'adiabatic'


class Operation84(Enum):
    replace = 'replace'
    add = 'add'
    subtract = 'subtract'


class TemperatureModel59(BaseModel):
    class Config:
        extra = Extra.forbid

    model: Model121
    operation: Optional[Operation84] = None
    min_distance_slab_top: Optional[float] = Field(None, alias='min distance slab top')
    max_distance_slab_top: Optional[float] = Field(None, alias='max distance slab top')
    potential_mantle_temperature: Optional[float] = Field(
        None, alias='potential mantle temperature'
    )
    thermal_expansion_coefficient: Optional[float] = Field(
        None, alias='thermal expansion coefficient'
    )
    specific_heat: Optional[float] = Field(None, alias='specific heat')


class Model122(Enum):
    linear = 'linear'


class TemperatureModel60(BaseModel):
    class Config:
        extra = Extra.forbid

    model: Model122
    operation: Optional[Operation84] = None
    min_distance_slab_top: Optional[float] = Field(None, alias='min distance slab top')
    max_distance_slab_top: float = Field(..., alias='max distance slab top')
    top_temperature: Optional[float] = Field(None, alias='top temperature')
    bottom_temperature: Optional[float] = Field(None, alias='bottom temperature')


class Model123(Enum):
    mass_conserving = 'mass conserving'


class TemperatureModel61(BaseModel):
    class Config:
        extra = Extra.forbid

    model: Model123
    operation: Optional[Operation84] = None
    min_distance_slab_top: Optional[float] = Field(None, alias='min distance slab top')
    max_distance_slab_top: Optional[float] = Field(None, alias='max distance slab top')
    density: Optional[float] = None
    plate_velocity: float = Field(..., alias='plate velocity')
    coupling_depth: Optional[float] = Field(None, alias='coupling depth')
    forearc_cooling_factor: Optional[float] = Field(
        None, alias='forearc cooling factor'
    )
    thermal_conductivity: Optional[float] = Field(None, alias='thermal conductivity')
    thermal_expansion_coefficient: Optional[float] = Field(
        None, alias='thermal expansion coefficient'
    )
    specific_heat: Optional[float] = Field(None, alias='specific heat')
    thermal_diffusivity: Optional[float] = Field(None, alias='thermal diffusivity')
    adiabatic_heating: Optional[bool] = Field(None, alias='adiabatic heating')
    taper_distance: Optional[float] = Field(None, alias='taper distance')
    potential_mantle_temperature: Optional[float] = Field(
        None, alias='potential mantle temperature'
    )
    ridge_coordinates: Optional[List[RidgeCoordinate]] = Field(
        None,
        alias='ridge coordinates',
        max_items=4294967295,
        min_items=1,
        unique_items=False,
    )


class Model124(Enum):
    plate_model = 'plate model'


class TemperatureModel62(BaseModel):
    class Config:
        extra = Extra.forbid

    model: Model124
    operation: Optional[Operation84] = None
    min_distance_slab_top: Optional[float] = Field(None, alias='min distance slab top')
    max_distance_slab_top: Optional[float] = Field(None, alias='max distance slab top')
    density: Optional[float] = None
    plate_velocity: float = Field(..., alias='plate velocity')
    thermal_conductivity: Optional[float] = Field(None, alias='thermal conductivity')
    thermal_expansion_coefficient: Optional[float] = Field(
        None, alias='thermal expansion coefficient'
    )
    specific_heat: Optional[float] = Field(None, alias='specific heat')
    adiabatic_heating: Optional[bool] = Field(None, alias='adiabatic heating')
    potential_mantle_temperature: Optional[float] = Field(
        None, alias='potential mantle temperature'
    )


class Model125(Enum):
    uniform = 'uniform'


class TemperatureModel63(BaseModel):
    class Config:
        extra = Extra.forbid

    model: Model125
    operation: Optional[Operation84] = None
    min_distance_slab_top: Optional[float] = Field(None, alias='min distance slab top')
    max_distance_slab_top: Optional[float] = Field(None, alias='max distance slab top')
    temperature: float


class Model126(Enum):
    smooth = 'smooth'


class Operation89(Enum):
    replace = 'replace'
    replace_defined_only = 'replace defined only'
    add = 'add'
    subtract = 'subtract'


class CompositionModel25(BaseModel):
    class Config:
        extra = Extra.forbid

    model: Model126
    min_distance_slab_top: Optional[float] = Field(None, alias='min distance slab top')
    max_distance_slab_top: Optional[float] = Field(None, alias='max distance slab top')
    top_fractions: Optional[List[float]] = Field(
        None,
        alias='top fractions',
        max_items=4294967295,
        min_items=1,
        unique_items=False,
    )
    bottom_fractions: Optional[List[float]] = Field(
        None,
        alias='bottom fractions',
        max_items=4294967295,
        min_items=1,
        unique_items=False,
    )
    compositions: List[int] = Field(
        ..., max_items=4294967295, min_items=0, unique_items=False
    )
    operation: Optional[Operation89] = None


class Model127(Enum):
    uniform = 'uniform'


class CompositionModel26(BaseModel):
    class Config:
        extra = Extra.forbid

    model: Model127
    min_distance_slab_top: Optional[float] = Field(None, alias='min distance slab top')
    max_distance_slab_top: Optional[float] = Field(None, alias='max distance slab top')
    compositions: List[int] = Field(
        ..., max_items=4294967295, min_items=0, unique_items=False
    )
    fractions: Optional[List[float]] = Field(
        None, max_items=4294967295, min_items=1, unique_items=False
    )
    operation: Optional[Operation89] = None


class Model128(Enum):
    random_uniform_distribution = 'random uniform distribution'


class GrainsModel28(BaseModel):
    class Config:
        extra = Extra.forbid

    model: Model128
    min_distance_slab_top: Optional[float] = Field(None, alias='min distance slab top')
    max_distance_slab_top: Optional[float] = Field(None, alias='max distance slab top')
    compositions: List[int] = Field(
        ..., max_items=4294967295, min_items=0, unique_items=False
    )
    orientation_operation: Optional[OrientationOperation2] = Field(
        None, alias='orientation operation'
    )
    grain_sizes: Optional[List[float]] = Field(
        None, alias='grain sizes', max_items=4294967295, min_items=0, unique_items=False
    )
    normalize_grain_sizes: Optional[List[bool]] = Field(
        None,
        alias='normalize grain sizes',
        max_items=4294967295,
        min_items=0,
        unique_items=False,
    )


class Model129(Enum):
    uniform = 'uniform'


class GrainsModel29(BaseModel):
    class Config:
        extra = Extra.forbid

    model: Model129
    min_distance_slab_top: Optional[float] = Field(None, alias='min distance slab top')
    max_distance_slab_top: Optional[float] = Field(None, alias='max distance slab top')
    compositions: List[int] = Field(
        ..., max_items=4294967295, min_items=0, unique_items=False
    )
    rotation_matrices: Optional[List[RotationMatrice]] = Field(
        None,
        alias='rotation matrices',
        max_items=4294967295,
        min_items=0,
        unique_items=False,
    )
    Euler_angles_z_x_z: Optional[List[EulerAnglesZXZItem]] = Field(
        None,
        alias='Euler angles z-x-z',
        max_items=4294967295,
        min_items=0,
        unique_items=False,
    )
    orientation_operation: Optional[OrientationOperation2] = Field(
        None, alias='orientation operation'
    )
    grain_sizes: Optional[List[float]] = Field(
        None, alias='grain sizes', max_items=4294967295, min_items=0, unique_items=False
    )


class Section1(BaseModel):
    contours: Optional[List[Contour1]] = Field(
        None, max_items=100000, min_items=1, unique_items=False
    )
    min_depth: Optional[float] = Field(None, alias='min depth')
    max_depth: Optional[float] = Field(None, alias='max depth')
    dip_point: Optional[List[float]] = Field(
        None, alias='dip point', max_items=2, min_items=2
    )
    segments: Optional[List[Segment3]] = Field(
        None, max_items=4294967295, min_items=0, unique_items=False
    )
    temperature_models: Optional[
        List[
            Union[
                TemperatureModel59,
                TemperatureModel60,
                TemperatureModel61,
                TemperatureModel62,
                TemperatureModel63,
            ]
        ]
    ] = Field(None, alias='temperature models')
    composition_models: Optional[
        List[Union[CompositionModel25, CompositionModel26]]
    ] = Field(None, alias='composition models')
    grains_models: Optional[List[Union[GrainsModel28, GrainsModel29]]] = Field(
        None, alias='grains models'
    )
    coordinate: Optional[int] = None


class Feature4(BaseModel):
    class Config:
        extra = Extra.forbid

    model: Model57
    name: Optional[str] = None
    coordinates: Optional[List[Coordinate]] = Field(
        None, max_items=4294967295, min_items=1, unique_items=False
    )
    interpolation: Optional[str] = None
    contours: Optional[List[Contour]] = Field(
        None, max_items=100000, min_items=1, unique_items=False
    )
    min_depth: Optional[float] = Field(None, alias='min depth')
    max_depth: Optional[float] = Field(None, alias='max depth')
    dip_point: Optional[List[float]] = Field(
        None, alias='dip point', max_items=2, min_items=2
    )
    segments: Optional[List[Segment2]] = Field(
        None, max_items=4294967295, min_items=0, unique_items=False
    )
    temperature_models: Optional[
        List[
            Union[
                TemperatureModel39,
                TemperatureModel40,
                TemperatureModel41,
                TemperatureModel42,
                TemperatureModel43,
            ]
        ]
    ] = Field(None, alias='temperature models')
    composition_models: Optional[
        List[Union[CompositionModel17, CompositionModel18]]
    ] = Field(None, alias='composition models')
    grains_models: Optional[List[Union[GrainsModel20, GrainsModel21]]] = Field(
        None, alias='grains models'
    )
    sections: Optional[List[Section1]] = Field(
        None, max_items=4294967295, min_items=0, unique_items=False
    )


class Model(BaseModel):
    class Config:
        extra = Extra.forbid

    version: str
    cross_section: Optional[List[CrossSectionItem]] = Field(
        None, alias='cross section', max_items=2, min_items=2, unique_items=False
    )
    potential_mantle_temperature: Optional[float] = Field(
        None, alias='potential mantle temperature'
    )
    surface_temperature: Optional[float] = Field(None, alias='surface temperature')
    force_surface_temperature: Optional[bool] = Field(
        None, alias='force surface temperature'
    )
    thermal_expansion_coefficient: Optional[float] = Field(
        None, alias='thermal expansion coefficient'
    )
    specific_heat: Optional[float] = Field(None, alias='specific heat')
    thermal_diffusivity: Optional[float] = Field(None, alias='thermal diffusivity')
    maximum_distance_between_coordinates: Optional[float] = Field(
        None, alias='maximum distance between coordinates'
    )
    interpolation: Optional[str] = None
    coordinate_system: Optional[
        Union[CoordinateSystemItem, CoordinateSystemItem1]
    ] = Field(None, alias='coordinate system')
    gravity_model: Optional[GravityModelItem] = Field(None, alias='gravity model')
    features: List[Union[Feature, Feature1, Feature2, Feature3, Feature4]]
